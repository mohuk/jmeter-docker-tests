<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Cherry API Functional Automation" enabled="true">
      <stringProp name="TestPlan.comments">Cherry API Functional Automation Test Folder</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <com.tag.jmeter.ext.config.PropertyReader guiclass="TestBeanGUI" testclass="com.tag.jmeter.ext.config.PropertyReader" testname="Property File Reader" enabled="true">
        <stringProp name="propFilePath">My_jmeter.properties</stringProp>
      </com.tag.jmeter.ext.config.PropertyReader>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Login" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1505715071000</longProp>
        <longProp name="ThreadGroup.end_time">1505715071000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">This thread Group takes access token from browser and set it into jmeter property</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfig guiclass="com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfigGui" testclass="com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfig" testname="PhantomJS Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="PhantomJSDriverConfig.phantomjs_path">${__P(phantomexe_filepath)}</stringProp>
          <stringProp name="PhantomJSDriverConfig.phantomjs_cli_args">--web-security=false, --ignore-ssl-errors=true,--webdriver-loglevel=NONE</stringProp>
          <stringProp name="PhantomJSDriverConfig.phantomjs_ghostdriver_cli_args"></stringProp>
        </com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Employer Login Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium); //WebDriver classes
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait); //WebDriver classes
var wait = new support_ui.WebDriverWait(WDS.browser, 5000);

WDS.sampleResult.sampleStart(); //captures sampler&apos;s start time
WDS.sampleResult.getLatency();
WDS.log.info(&quot;Sample started&quot;);

WDS.browser.get(&quot;${__P(employer_index_filepath)}&quot;); //opens website specified in &apos;http://duckduckgo.com&apos; // Update this URL
WDS.log.info(&quot;Sample ended - navigated to Cherry&quot;);

java.lang.Thread.sleep( 10000 )

var token = WDS.browser.findElement(pkg.By.id(&apos;successAndErrorMessages&apos;));
WDS.log.info(token.getText());
var props = org.apache.jmeter.util.JMeterUtils.getJMeterProperties();
props.put(&apos;empaccesstoken&apos;,token.getText())
WDS.log.info(props.get(&quot;empaccesstoken&quot;));

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Consultant Login Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium); //WebDriver classes
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait); //WebDriver classes
var wait = new support_ui.WebDriverWait(WDS.browser, 5000);

WDS.sampleResult.sampleStart(); //captures sampler&apos;s start time
WDS.sampleResult.getLatency();
WDS.log.info(&quot;Sample started&quot;);

WDS.log.info(&quot;${__P(consultant_index_filepath)}&quot;);

//var url_path = props.get(&apos;consultant_index_filepath&apos;)

WDS.browser.get(&quot;${__P(consultant_index_filepath)}&quot;); //opens website specified in &apos;http://duckduckgo.com&apos; // Update this URL
WDS.log.info(&quot;Sample ended - navigated to Cherry&quot;);

java.lang.Thread.sleep( 10000 )

var token = WDS.browser.findElement(pkg.By.id(&apos;successAndErrorMessages&apos;));
WDS.log.info(token.getText());
var props = org.apache.jmeter.util.JMeterUtils.getJMeterProperties();
props.put(&apos;consaccesstoken&apos;,token.getText())
WDS.log.info(props.get(&quot;consaccesstoken&quot;));

WDS.sampleResult.sampleEnd();
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Dashboard &amp; MnS" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1505392264000</longProp>
        <longProp name="ThreadGroup.end_time">1505392264000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">Cherry API Functional Automation</stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">token</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSkillsofCategories" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(api_version)}/public/categories/skills</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">This is Finalized Call where all Ids are extracted</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_accounting" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">AOE_accounting</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_marketing" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">AOE_marketing</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_SoftwareDev" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">AOE_SoftwareDev</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_design" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">AOE_design</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_IT" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">AOE_IT</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_writing" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">AOE_writing</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Accounting_Skills" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">Skill0;Skill1;Skill2;Skill3;Skill4;Skill5;Skill6;Skill7</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos;)].skills[0].id;$..[?(@.name == &apos;Accounting&apos;)].skills[1].id;$..[?(@.name == &apos;Accounting&apos;)].skills[2].id;$..[?(@.name == &apos;Accounting&apos;)].skills[3].id;$..[?(@.name == &apos;Accounting&apos;)].skills[4].id;$..[?(@.name == &apos;Accounting&apos;)].skills[5].id;$..[?(@.name == &apos;Accounting&apos;)].skills[6].id;$..[?(@.name == &apos;Accounting&apos;)].skills[7].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Marketing_Skills" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">Skill8;Skill9;Skill10;Skill11;Skill12;Skill13;Skill14;Skill15;Skill16;Skill17;Skill18;Skill19;Skill20;Skill21;Skill22;Skill23</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos;)].skills[0].id;$..[?(@.name == &apos;Marketing&apos;)].skills[1].id;$..[?(@.name == &apos;Marketing&apos;)].skills[2].id;$..[?(@.name == &apos;Marketing&apos;)].skills[3].id;$..[?(@.name == &apos;Marketing&apos;)].skills[4].id;$..[?(@.name == &apos;Marketing&apos;)].skills[5].id;$..[?(@.name == &apos;Marketing&apos;)].skills[6].id;$..[?(@.name == &apos;Marketing&apos;)].skills[7].id;$..[?(@.name == &apos;Marketing&apos;)].skills[8].id;$..[?(@.name == &apos;Marketing&apos;)].skills[9].id;$..[?(@.name == &apos;Marketing&apos;)].skills[10].id;$..[?(@.name == &apos;Marketing&apos;)].skills[11].id;$..[?(@.name == &apos;Marketing&apos;)].skills[12].id;$..[?(@.name == &apos;Marketing&apos;)].skills[13].id;$..[?(@.name == &apos;Marketing&apos;)].skills[14].id;$..[?(@.name == &apos;Marketing&apos;)].skills[15].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Software Development_Skills" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">Skill24;Skill25;Skill26;Skill27;Skill28;Skill29;Skill30;Skill31;Skill32;Skill33;Skill34;Skill35;Skill36;Skill37;Skill38</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos;)].skills[0].id;$..[?(@.name == &apos;Software Development&apos;)].skills[1].id;$..[?(@.name == &apos;Software Development&apos;)].skills[2].id;$..[?(@.name == &apos;Software Development&apos;)].skills[3].id;$..[?(@.name == &apos;Software Development&apos;)].skills[4].id;$..[?(@.name == &apos;Software Development&apos;)].skills[5].id;$..[?(@.name == &apos;Software Development&apos;)].skills[6].id;$..[?(@.name == &apos;Software Development&apos;)].skills[7].id;$..[?(@.name == &apos;Software Development&apos;)].skills[8].id;$..[?(@.name == &apos;Software Development&apos;)].skills[9].id;$..[?(@.name == &apos;Software Development&apos;)].skills[10].id;$..[?(@.name == &apos;Software Development&apos;)].skills[11].id;$..[?(@.name == &apos;Software Development&apos;)].skills[12].id;$..[?(@.name == &apos;Software Development&apos;)].skills[13].id;$..[?(@.name == &apos;Software Development&apos;)].skills[14].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Design_Skills" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">Skill39;Skill40;Skill41;Skill42;Skill43;Skill44;Skill45;Skill46;Skill47;Skill48;Skill49;Skill50;Skill51;Skill52;Skill53;Skill54;Skill55;Skill56</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos;)].skills[0].id;$..[?(@.name == &apos;Design&apos;)].skills[1].id;$..[?(@.name == &apos;Design&apos;)].skills[2].id;$..[?(@.name == &apos;Design&apos;)].skills[3].id;$..[?(@.name == &apos;Design&apos;)].skills[4].id;$..[?(@.name == &apos;Design&apos;)].skills[5].id;$..[?(@.name == &apos;Design&apos;)].skills[6].id;$..[?(@.name == &apos;Design&apos;)].skills[7].id;$..[?(@.name == &apos;Design&apos;)].skills[8].id;$..[?(@.name == &apos;Design&apos;)].skills[9].id;$..[?(@.name == &apos;Design&apos;)].skills[10].id;$..[?(@.name == &apos;Design&apos;)].skills[11].id;$..[?(@.name == &apos;Design&apos;)].skills[12].id;$..[?(@.name == &apos;Design&apos;)].skills[13].id;$..[?(@.name == &apos;Design&apos;)].skills[14].id;$..[?(@.name == &apos;Design&apos;)].skills[15].id;$..[?(@.name == &apos;Design&apos;)].skills[16].id;$..[?(@.name == &apos;Design&apos;)].skills[17].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="IT services_Skills" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">Skill57;Skill58;Skill59;Skill60;Skill61</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos;)].skills[0].id;$..[?(@.name == &apos;IT Services&apos;)].skills[1].id;$..[?(@.name == &apos;IT Services&apos;)].skills[2].id;$..[?(@.name == &apos;IT Services&apos;)].skills[3].id;$..[?(@.name == &apos;IT Services&apos;)].skills[4].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Writing &amp; Editing_Skills" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">Skill62;Skill63;Skill64;Skill65;Skill66;Skill67;Skill68;Skill69;Skill70</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[0].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[1].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[2].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[3].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[4].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[5].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[6].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[7].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[8].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetupItems" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey"></stringProp>
          <stringProp name="script">var today1 = new Date();
var today2 = new Date();
var today3 = new Date();
var hour1 = 10;
var hour2 = 10;
var hourlyrate = 2;

var emp_rating = 2;
var cons_rating = 3;
var review_att1 = &quot;Communication&quot;;
var review_att2 = &quot;Job Description&quot;;

var comp_name_ex = &quot;${__RandomString(10,abcdefghijklmnopqrstuvwxyz,)}&quot;;

log.info(comp_name_ex);

log.info(today1.getTimezoneOffset()*60*1000);
log.info(today1.setDate(today1.getDate())) //  current date
log.info(today2.setDate(today2.getDate() + 2)) // Future Date
log.info(today3.setDate(today3.getDate() - 5)) // Past Dates

//d2.setHours ( d1.getHours() + 6 );

//log.info(&quot;Actual Date is&quot; + today1.setDate(today1.getDate()))
log.info(&quot;Current Date with 6 hours add &quot; + today1.setHours(today1.getHours() + 1));

var tz_offset = today1.getTimezoneOffset()*60*1000;
var date_5 = today1.setHours(today1.getHours() + 1);
var date_1 = today1.setDate(today1.getDate())
today2.setDate(today2.getDate() + 2)
var date_3 = today3.setDate(today3.getDate() - 5)
var date4_midtime = today1.setHours(0,0,0,0);
var date_2 = today2.setHours(0,0,0,0);

vars.put(&quot;tzOffset&quot;, tz_offset);
vars.put(&quot;current_date&quot;, date_1);
vars.put(&quot;future_date&quot;, date_2);
vars.put(&quot;past_date&quot;, date_3);
vars.put(&quot;current_date_midtime&quot;, date4_midtime);
vars.put(&quot;current_date_addhours&quot;, date_5);

vars.put(&quot;hour_1&quot;, hour1);
vars.put(&quot;hour_2&quot;, hour2);
vars.put(&quot;hourly_rate&quot;, hourlyrate);

vars.put(&quot;emp_rating&quot;, emp_rating);
vars.put(&quot;cons_rating&quot;, cons_rating);
vars.put(&quot;review_att1&quot;, review_att1);
vars.put(&quot;review_att2&quot;, review_att2);

vars.put(&quot;invalid_values&quot;, &quot;1234&quot;);
vars.put(&quot;comp_name&quot;, comp_name_ex);

//vars.put(&quot;jobPostId&quot;, &quot;14:2602&quot;);
//vars.put(&quot;jobPostId2&quot;, &quot;14:2472&quot;);
//vars.put(&quot;jobPostId3&quot;, &quot;14:2474&quot;);
//vars.put(&quot;jobPostId4&quot;, &quot;14:2558&quot;);
//
//
//vars.put(&quot;app_id&quot;, &quot;33:1010&quot;);
//vars.put(&quot;app_id2&quot;, &quot;32:1028&quot;);
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Emp - GetMyProfile" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(api_version)}/profile/me</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">emp_hasOnboarded</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.hasOnboarded</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons - GetMyProfile" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(api_version)}/profile/me</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">cons_hasOnboarded</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.hasOnboarded</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF_EMP_ONBOARD=FALSE" enabled="true">
          <stringProp name="IfController.condition">${emp_hasOnboarded} == false</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Employer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;companyName&quot;: &quot;${comp_name}&quot;,&#xd;
	&quot;website&quot;: &quot;&quot;,&#xd;
	&quot;specialities&quot;: [],&#xd;
	&quot;additionalSpecialities&quot;: [&quot;Apps&quot;, &quot;DevOps&quot;],&#xd;
	&quot;companyDescription&quot;: &quot;This is my company&quot;,&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;isHeadquarter&quot;: true&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="IF_CONS_ONBOARD=FALSE" enabled="true">
          <stringProp name="IfController.condition">${cons_hasOnboarded} == false</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Consultant" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;firstName&quot;: &quot;Richard&quot;,&#xd;
	&quot;lastName&quot;: &quot;Branson&quot;,&#xd;
	&quot;address&quot;: &quot;House No. ABC  Street 17 Gulberg Lahore&quot;,&#xd;
	&quot;commuteRadius&quot;: 29,&#xd;
	&quot;workingHours&quot;: 29,&#xd;
	&quot;title&quot;: &quot;Accounts Officer&quot;,&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 1,&#xd;
		&quot;rank&quot;: 1,&#xd;
		&quot;proficiency&quot;: &quot;expert&quot;&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 2,&#xd;
		&quot;rank&quot;: 2,&#xd;
		&quot;proficiency&quot;: &quot;advanced&quot;&#xd;
	}],&#xd;
	&quot;hourlyRate&quot;: {&#xd;
		&quot;min&quot;: 75,&#xd;
		&quot;max&quot;: 100&#xd;
	},&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;experience&quot;: 3&#xd;
	}],&#xd;
	&quot;workExperience&quot;: [],&#xd;
	&quot;education&quot;: [{&#xd;
		&quot;institution&quot;: &quot;NED&quot;,&#xd;
		&quot;degree&quot;: &quot;Bachelors&quot;,&#xd;
		&quot;major&quot;: &quot;Science&quot;,&#xd;
		&quot;startDate&quot;: 1364756400000,&#xd;
		&quot;isCurrent&quot;: true,&#xd;
		&quot;description&quot;: &quot;Test Education certificate&quot;,&#xd;
		&quot;skills&quot;: [&quot;grant writing&quot;]&#xd;
	}],&#xd;
	&quot;artifacts&quot;: []&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Test Sample Values" enabled="true">
          <stringProp name="TestPlan.comments">This Controller provides TermID and Consultant IDs</stringProp>
        </GenericController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="terms - Term And Condition" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/termAndCondition</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TermID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">term_id</stringProp>
              <stringProp name="RegexExtractor.regex">\,&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Consultant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/me</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Consultant ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cons_Id</stringProp>
              <stringProp name="RegexExtractor.regex">\,&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Consultant Email" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cons_email</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;email&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get cons_skills" enabled="true">
              <stringProp name="VAR">cons_skills</stringProp>
              <stringProp name="JSONPATH">artifacts[0].skills[0]</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get cons_title" enabled="true">
              <stringProp name="VAR">cons_title</stringProp>
              <stringProp name="JSONPATH">artifacts[0].title</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get cons_relatedExperience" enabled="true">
              <stringProp name="VAR">cons_relatedExperience</stringProp>
              <stringProp name="JSONPATH">artifacts[0].relatedExperience</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get cons_art_url" enabled="true">
              <stringProp name="VAR">cons_art_url</stringProp>
              <stringProp name="JSONPATH">artifacts[0].files[0].url</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get ProfileCompletenessScore" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">profileCompletenessScore</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">profileCompletenessScore</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Consultant Profile Completeness" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">// Consultant Profile Score Verification

var profileScore_act = vars.get(&apos;profileCompletenessScore&apos;);
var locationScore = 5;
var commuteScore= 5;
var lookingforScore= 5;
var aoeScore = 15;
var titleScore = 5;
var rateScore = 10;
var skillsScore = 30;
var workScore = 10;
var educationScore = 10;
var artifactsScore = 5;
var profileScore_Exp = 0;

var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);

if(obj.address.toString() &amp;&amp; obj.address != &quot;&quot;){
//	log.info(&quot;Address NOT Empty&quot;);
	profileScore_Exp += locationScore;
}
if(obj.commuteRadius.toString() &amp;&amp; parseInt(obj.commuteRadius) &gt;= 0){
//	log.info(&quot;Commute NOT Empty&quot;);
	profileScore_Exp += commuteScore;
}
if(obj.workingHours.toString() &amp;&amp; parseInt(obj.workingHours) &gt;= 10){
//	log.info(&quot;Looking For NOT Empty&quot;);
	profileScore_Exp += lookingforScore;
}
if(obj.areaOfExpertise.toString() &amp;&amp; obj.areaOfExpertise != &quot;&quot;){
//	log.info(&quot;AOE NOT Empty&quot;);
	profileScore_Exp += aoeScore;
}
if(obj.title.toString() &amp;&amp; obj.title != &quot;&quot;){
//	log.info(&quot;Title NOT Empty&quot;);
	profileScore_Exp += titleScore;
}
if(obj.hourlyRate.toString() &amp;&amp; obj.hourlyRate != &quot;&quot;){
//	log.info(&quot;Rate NOT Empty&quot;);
	profileScore_Exp += rateScore;
}
if(obj.skills.toString() &amp;&amp; obj.skills != &quot;&quot;){
//	log.info(&quot;Skills NOT Empty&quot;);
	profileScore_Exp += skillsScore;
}
if(obj.workExperience.toString() &amp;&amp; obj.workExperience != &quot;&quot;){
//	log.info(&quot;Work Experience NOT Empty&quot;);
	profileScore_Exp += workScore;
}
if(obj.education != null){
	if(obj.education.toString() &amp;&amp; obj.education != &quot;&quot;){
//	log.info(&quot;Education NOT Empty&quot;);
	profileScore_Exp += educationScore;
	}
}
if(obj.artifacts.toString() &amp;&amp; obj.artifacts != &quot;&quot;){
//	log.info(&quot;Artifacts NOT Empty&quot;);
	profileScore_Exp += artifactsScore;
}

log.info(&quot;Expected Profile Completeness Score &quot; +profileScore_Exp); // Expected sorted array
log.info(&quot;Actual Profile Completeness Score &quot; +profileScore_act); // Actual Sort value

if(parseInt(profileScore_Exp) != parseInt(profileScore_act)){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Completeness Score is incorrect&quot;);
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Employer" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/me</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get ProfileCompletenessScore" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">profileCompletenessScore</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">profileCompletenessScore</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Employer Profile Completeness" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">// Employer Profile Score Verification

var profileScore_act = vars.get(&apos;profileCompletenessScore&apos;);
var profileScore_Exp = 0;
var companyNameScore = 20;
var companyDescScore = 10;
var websiteUrlScore = 10;
var specialitiesScore = 30;
var locationScore = 30;

var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);

if(obj.companyName.toString() &amp;&amp; obj.companyName != &quot;&quot;){
//	log.info(&quot;Company Name NOT Empty&quot;);
	profileScore_Exp += companyNameScore;
}
if(obj.companyDescription.toString() &amp;&amp; obj.companyDescription != &quot;&quot;){
//	log.info(&quot;Company Description NOT Empty&quot;);
	profileScore_Exp += companyDescScore;
}
if(obj.website.toString() &amp;&amp; obj.website != &quot;&quot;){
//	log.info(&quot;Company URL NOT Empty&quot;);
	profileScore_Exp += websiteUrlScore;
}
if(obj.specialities.toString() &amp;&amp; obj.specialities != &quot;&quot;){
//	log.info(&quot;Specialities NOT Empty&quot;);
	profileScore_Exp += specialitiesScore;
}
if(obj.locations.toString() &amp;&amp; obj.locations != &quot;&quot;){
//	log.info(&quot;Location NOT Empty&quot;);
	profileScore_Exp += locationScore;
}


log.info(&quot;Expected Profile Completeness Score &quot; +profileScore_Exp); // Expected sorted array
log.info(&quot;Actual Profile Completeness Score &quot; +profileScore_act); // Actual Sort value

if(parseInt(profileScore_Exp) != parseInt(profileScore_act)){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Completeness Score is incorrect&quot;);
}

</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consultant - Get Consultant Applications" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/applications?skip=0&amp;limit=100&amp;sort=scoreDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1820167443">${app_id}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="JPLP Matches" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/14:2702/match?skip=0&amp;limit=20&amp;sort=hourlyPayRateDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get ProfileCompletenessScore" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">profileCompletenessScore</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">profileCompletenessScore</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Employer Profile Completeness" enabled="false">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">// Employer Profile Score Verification

var profileScore_act = vars.get(&apos;profileCompletenessScore&apos;);
var profileScore_Exp = 0;
var companyNameScore = 20;
var companyDescScore = 10;
var websiteUrlScore = 10;
var specialitiesScore = 30;
var locationScore = 30;

var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);

if(obj.companyName.toString() &amp;&amp; obj.companyName != &quot;&quot;){
//	log.info(&quot;Company Name NOT Empty&quot;);
	profileScore_Exp += companyNameScore;
}
if(obj.companyDescription.toString() &amp;&amp; obj.companyDescription != &quot;&quot;){
//	log.info(&quot;Company Description NOT Empty&quot;);
	profileScore_Exp += companyDescScore;
}
if(obj.website.toString() &amp;&amp; obj.website != &quot;&quot;){
//	log.info(&quot;Company URL NOT Empty&quot;);
	profileScore_Exp += websiteUrlScore;
}
if(obj.specialities.toString() &amp;&amp; obj.specialities != &quot;&quot;){
//	log.info(&quot;Specialities NOT Empty&quot;);
	profileScore_Exp += specialitiesScore;
}
if(obj.locations.toString() &amp;&amp; obj.locations != &quot;&quot;){
//	log.info(&quot;Location NOT Empty&quot;);
	profileScore_Exp += locationScore;
}


log.info(&quot;Expected Profile Completeness Score &quot; +profileScore_Exp); // Expected sorted array
log.info(&quot;Actual Profile Completeness Score &quot; +profileScore_act); // Actual Sort value

if(parseInt(profileScore_Exp) != parseInt(profileScore_act)){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Completeness Score is incorrect&quot;);
}

</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Employer" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSkillsofCategories" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/public/categories/skills</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">This is Finalized Call where all Ids are extracted</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_accounting" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_accounting</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_marketing" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_marketing</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_SoftwareDev" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_SoftwareDev</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_design" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_design</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_IT" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_IT</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_writing" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_writing</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Accounting_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill0;Skill1;Skill2;Skill3;Skill4;Skill5;Skill6;Skill7</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos;)].skills[0].id;$..[?(@.name == &apos;Accounting&apos;)].skills[1].id;$..[?(@.name == &apos;Accounting&apos;)].skills[2].id;$..[?(@.name == &apos;Accounting&apos;)].skills[3].id;$..[?(@.name == &apos;Accounting&apos;)].skills[4].id;$..[?(@.name == &apos;Accounting&apos;)].skills[5].id;$..[?(@.name == &apos;Accounting&apos;)].skills[6].id;$..[?(@.name == &apos;Accounting&apos;)].skills[7].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Marketing_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill8;Skill9;Skill10;Skill11;Skill12;Skill13;Skill14;Skill15;Skill16;Skill17;Skill18;Skill19;Skill20;Skill21;Skill22;Skill23</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos;)].skills[0].id;$..[?(@.name == &apos;Marketing&apos;)].skills[1].id;$..[?(@.name == &apos;Marketing&apos;)].skills[2].id;$..[?(@.name == &apos;Marketing&apos;)].skills[3].id;$..[?(@.name == &apos;Marketing&apos;)].skills[4].id;$..[?(@.name == &apos;Marketing&apos;)].skills[5].id;$..[?(@.name == &apos;Marketing&apos;)].skills[6].id;$..[?(@.name == &apos;Marketing&apos;)].skills[7].id;$..[?(@.name == &apos;Marketing&apos;)].skills[8].id;$..[?(@.name == &apos;Marketing&apos;)].skills[9].id;$..[?(@.name == &apos;Marketing&apos;)].skills[10].id;$..[?(@.name == &apos;Marketing&apos;)].skills[11].id;$..[?(@.name == &apos;Marketing&apos;)].skills[12].id;$..[?(@.name == &apos;Marketing&apos;)].skills[13].id;$..[?(@.name == &apos;Marketing&apos;)].skills[14].id;$..[?(@.name == &apos;Marketing&apos;)].skills[15].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Software Development_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill24;Skill25;Skill26;Skill27;Skill28;Skill29;Skill30;Skill31;Skill32;Skill33;Skill34;Skill35;Skill36;Skill37;Skill38</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos;)].skills[0].id;$..[?(@.name == &apos;Software Development&apos;)].skills[1].id;$..[?(@.name == &apos;Software Development&apos;)].skills[2].id;$..[?(@.name == &apos;Software Development&apos;)].skills[3].id;$..[?(@.name == &apos;Software Development&apos;)].skills[4].id;$..[?(@.name == &apos;Software Development&apos;)].skills[5].id;$..[?(@.name == &apos;Software Development&apos;)].skills[6].id;$..[?(@.name == &apos;Software Development&apos;)].skills[7].id;$..[?(@.name == &apos;Software Development&apos;)].skills[8].id;$..[?(@.name == &apos;Software Development&apos;)].skills[9].id;$..[?(@.name == &apos;Software Development&apos;)].skills[10].id;$..[?(@.name == &apos;Software Development&apos;)].skills[11].id;$..[?(@.name == &apos;Software Development&apos;)].skills[12].id;$..[?(@.name == &apos;Software Development&apos;)].skills[13].id;$..[?(@.name == &apos;Software Development&apos;)].skills[14].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Design_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill39;Skill40;Skill41;Skill42;Skill43;Skill44;Skill45;Skill46;Skill47;Skill48;Skill49;Skill50;Skill51;Skill52;Skill53;Skill54;Skill55;Skill56</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos;)].skills[0].id;$..[?(@.name == &apos;Design&apos;)].skills[1].id;$..[?(@.name == &apos;Design&apos;)].skills[2].id;$..[?(@.name == &apos;Design&apos;)].skills[3].id;$..[?(@.name == &apos;Design&apos;)].skills[4].id;$..[?(@.name == &apos;Design&apos;)].skills[5].id;$..[?(@.name == &apos;Design&apos;)].skills[6].id;$..[?(@.name == &apos;Design&apos;)].skills[7].id;$..[?(@.name == &apos;Design&apos;)].skills[8].id;$..[?(@.name == &apos;Design&apos;)].skills[9].id;$..[?(@.name == &apos;Design&apos;)].skills[10].id;$..[?(@.name == &apos;Design&apos;)].skills[11].id;$..[?(@.name == &apos;Design&apos;)].skills[12].id;$..[?(@.name == &apos;Design&apos;)].skills[13].id;$..[?(@.name == &apos;Design&apos;)].skills[14].id;$..[?(@.name == &apos;Design&apos;)].skills[15].id;$..[?(@.name == &apos;Design&apos;)].skills[16].id;$..[?(@.name == &apos;Design&apos;)].skills[17].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="IT services_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill57;Skill58;Skill59;Skill60;Skill61</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos;)].skills[0].id;$..[?(@.name == &apos;IT Services&apos;)].skills[1].id;$..[?(@.name == &apos;IT Services&apos;)].skills[2].id;$..[?(@.name == &apos;IT Services&apos;)].skills[3].id;$..[?(@.name == &apos;IT Services&apos;)].skills[4].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Writing &amp; Editing_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill62;Skill63;Skill64;Skill65;Skill66;Skill67;Skill68;Skill69;Skill70</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[0].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[1].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[2].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[3].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[4].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[5].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[6].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[7].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[8].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All Categories" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/categories</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Employer" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/me</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get ProfileCompletenessScore" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">profileCompletenessScore</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">profileCompletenessScore</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Employer Profile Completeness" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">// Employer Profile Score Verification

var profileScore_act = vars.get(&apos;profileCompletenessScore&apos;);
var profileScore_Exp = 0;
var companyNameScore = 20;
var companyDescScore = 10;
var websiteUrlScore = 10;
var specialitiesScore = 30;
var locationScore = 30;

var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);

if(obj.companyName.toString() &amp;&amp; obj.companyName != &quot;&quot;){
//	log.info(&quot;Company Name NOT Empty&quot;);
	profileScore_Exp += companyNameScore;
}
if(obj.companyDescription.toString() &amp;&amp; obj.companyDescription != &quot;&quot;){
//	log.info(&quot;Company Description NOT Empty&quot;);
	profileScore_Exp += companyDescScore;
}
if(obj.website.toString() &amp;&amp; obj.website != &quot;&quot;){
//	log.info(&quot;Company URL NOT Empty&quot;);
	profileScore_Exp += websiteUrlScore;
}
if(obj.specialities.toString() &amp;&amp; obj.specialities != &quot;&quot;){
//	log.info(&quot;Specialities NOT Empty&quot;);
	profileScore_Exp += specialitiesScore;
}
if(obj.locations.toString() &amp;&amp; obj.locations != &quot;&quot;){
//	log.info(&quot;Location NOT Empty&quot;);
	profileScore_Exp += locationScore;
}


log.info(&quot;Expected Profile Completeness Score &quot; +profileScore_Exp); // Expected sorted array
log.info(&quot;Actual Profile Completeness Score &quot; +profileScore_act); // Actual Sort value

if(parseInt(profileScore_Exp) != parseInt(profileScore_act)){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Completeness Score is incorrect&quot;);
}

</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Employer Jobs" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">jobId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Dynamic Match Count" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;name&quot;: &quot;software development&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;name&quot;: &quot;design&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;name&quot;: &quot;marketing&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skillIds&quot;: [&#xd;
        &quot;${Skill10}&quot;,&#xd;
        &quot;${Skill8}&quot;,&#xd;
        &quot;${Skill24}&quot;,&#xd;
        &quot;${Skill39}&quot;&#xd;
    ],&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 13&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/dynamicMatchCount</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - Get Saved Consultants" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/saveConsultants</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - Get Employer Stats" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/stats</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Consultant" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Artifact - Tech Url" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryHlhLhG2WOFptFgnJ&#xd;
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;Tulips.jpg&quot;&#xd;
Content-Type: image/jpeg&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryHlhLhG2WOFptFgnJ&#xd;
Content-Disposition: form-data; name=&quot;type&quot;&#xd;
&#xd;
artifact&#xd;
------WebKitFormBoundaryHlhLhG2WOFptFgnJ--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/files</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryHlhLhG2WOFptFgnJ</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TechURL</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.url</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateConsultant-SendNULLDegree/Program" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;firstName&quot;: &quot;Richard&quot;,&#xd;
	&quot;lastName&quot;: &quot;Branson&quot;,&#xd;
	&quot;address&quot;: &quot;House No. ABC  Street 17 Gulberg Lahore&quot;,&#xd;
	&quot;commuteRadius&quot;: 29,&#xd;
	&quot;workingHours&quot;: 29,&#xd;
	&quot;title&quot;: &quot;Accounts Officer&quot;,&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;17:0&quot;,&#xd;
		&quot;experience&quot;: 1,&#xd;
		&quot;rank&quot;: 1,&#xd;
		&quot;proficiency&quot;: &quot;expert&quot;&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;17:1&quot;,&#xd;
		&quot;experience&quot;: 2,&#xd;
		&quot;rank&quot;: 2,&#xd;
		&quot;proficiency&quot;: &quot;advanced&quot;&#xd;
	}],&#xd;
	&quot;hourlyRate&quot;: {&#xd;
		&quot;min&quot;: 75,&#xd;
		&quot;max&quot;: 100&#xd;
	},&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;16:0&quot;,&#xd;
		&quot;experience&quot;: 3&#xd;
	}],&#xd;
	&quot;workExperience&quot;: [{&#xd;
		&quot;skills&quot;: [&#xd;
			&quot;nodejs&quot;,&#xd;
			&quot;ruby&quot;&#xd;
		],&#xd;
		&quot;jobTitle&quot;: &quot;Software Dev&quot;,&#xd;
		&quot;rank&quot;: 1,&#xd;
		&quot;company&quot;: &quot;10-Pearls&quot;,&#xd;
		&quot;startDate&quot;: 1498044967106,&#xd;
		&quot;endDate&quot;: 1512716267000&#xd;
	}],&#xd;
	&quot;education&quot;: [{&#xd;
		&quot;institution&quot;: &quot;NED&quot;,&#xd;
		&quot;degree&quot;: &quot;&quot;,&#xd;
		&quot;major&quot;: &quot;Science&quot;,&#xd;
		&quot;startDate&quot;: 1364756400000,&#xd;
		&quot;isCurrent&quot;: true,&#xd;
		&quot;description&quot;: &quot;Test Education certificate&quot;,&#xd;
		&quot;skills&quot;: [&quot;grant writing&quot;]&#xd;
	}],&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;MY new artifact&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;MSC&quot;,&#xd;
		&quot;skills&quot;: [&quot;Tax Preparation&quot;],&#xd;
		&quot;urls&quot;: [&quot;https://s3.amazonaws.com/cherrydevbucket/605c9ee4-1593-4253-a2b0-411e2f0d086f-1512926290536-Tulips.jpg&quot;]&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1488243623">degree cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;firstName&quot;: &quot;Richard&quot;,&#xd;
	&quot;lastName&quot;: &quot;Branson&quot;,&#xd;
	&quot;address&quot;: &quot;House No. ABC  Street 17 Gulberg Lahore&quot;,&#xd;
	&quot;commuteRadius&quot;: 29,&#xd;
	&quot;workingHours&quot;: 29,&#xd;
	&quot;title&quot;: &quot;Accounts Officer&quot;,&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 1,&#xd;
		&quot;rank&quot;: 1,&#xd;
		&quot;proficiency&quot;: &quot;expert&quot;&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 2,&#xd;
		&quot;rank&quot;: 2,&#xd;
		&quot;proficiency&quot;: &quot;advanced&quot;&#xd;
	}],&#xd;
	&quot;hourlyRate&quot;: {&#xd;
		&quot;min&quot;: 75,&#xd;
		&quot;max&quot;: 100&#xd;
	},&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;experience&quot;: 3&#xd;
	}],&#xd;
	&quot;workExperience&quot;: [],&#xd;
	&quot;education&quot;: [{&#xd;
		&quot;institution&quot;: &quot;NED&quot;,&#xd;
		&quot;degree&quot;: &quot;Bachelors&quot;,&#xd;
		&quot;major&quot;: &quot;Science&quot;,&#xd;
		&quot;startDate&quot;: 1364756400000,&#xd;
		&quot;isCurrent&quot;: true,&#xd;
		&quot;description&quot;: &quot;Test Education certificate&quot;,&#xd;
		&quot;skills&quot;: [&quot;grant writing&quot;]&#xd;
	}],&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;MY new artifact&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;MSC&quot;,&#xd;
		&quot;skills&quot;: [&quot;Tax Preparation&quot;],&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Consultant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/me</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Consultant ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cons_Id</stringProp>
              <stringProp name="RegexExtractor.regex">\,&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Consultant Email" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cons_email</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;email&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get cons_skills" enabled="true">
              <stringProp name="VAR">cons_skills</stringProp>
              <stringProp name="JSONPATH">artifacts[0].skills[0]</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get cons_title" enabled="true">
              <stringProp name="VAR">cons_title</stringProp>
              <stringProp name="JSONPATH">artifacts[0].title</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get cons_relatedExperience" enabled="true">
              <stringProp name="VAR">cons_relatedExperience</stringProp>
              <stringProp name="JSONPATH">artifacts[0].relatedExperience</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get cons_art_url" enabled="true">
              <stringProp name="VAR">cons_art_url</stringProp>
              <stringProp name="JSONPATH">artifacts[0].files[0].url</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Get ProfileCompletenessScore" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">profileCompletenessScore</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">profileCompletenessScore</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Consultant Profile Completeness" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">// Consultant Profile Score Verification

var profileScore_act = vars.get(&apos;profileCompletenessScore&apos;);
var locationScore = 5;
var commuteScore= 5;
var lookingforScore= 5;
var aoeScore = 15;
var titleScore = 5;
var rateScore = 10;
var skillsScore = 30;
var workScore = 10;
var educationScore = 10;
var artifactsScore = 5;
var profileScore_Exp = 0;

var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);

if(obj.address.toString() &amp;&amp; obj.address != &quot;&quot;){
//	log.info(&quot;Address NOT Empty&quot;);
	profileScore_Exp += locationScore;
}
if(obj.commuteRadius.toString() &amp;&amp; parseInt(obj.commuteRadius) &gt;= 0){
//	log.info(&quot;Commute NOT Empty&quot;);
	profileScore_Exp += commuteScore;
}
if(obj.workingHours.toString() &amp;&amp; parseInt(obj.workingHours) &gt;= 10){
//	log.info(&quot;Looking For NOT Empty&quot;);
	profileScore_Exp += lookingforScore;
}
if(obj.areaOfExpertise.toString() &amp;&amp; obj.areaOfExpertise != &quot;&quot;){
//	log.info(&quot;AOE NOT Empty&quot;);
	profileScore_Exp += aoeScore;
}
if(obj.title.toString() &amp;&amp; obj.title != &quot;&quot;){
//	log.info(&quot;Title NOT Empty&quot;);
	profileScore_Exp += titleScore;
}
if(obj.hourlyRate.toString() &amp;&amp; obj.hourlyRate != &quot;&quot;){
//	log.info(&quot;Rate NOT Empty&quot;);
	profileScore_Exp += rateScore;
}
if(obj.skills.toString() &amp;&amp; obj.skills != &quot;&quot;){
//	log.info(&quot;Skills NOT Empty&quot;);
	profileScore_Exp += skillsScore;
}
if(obj.workExperience.toString() &amp;&amp; obj.workExperience != &quot;&quot;){
//	log.info(&quot;Work Experience NOT Empty&quot;);
	profileScore_Exp += workScore;
}
if(obj.education != null){
	if(obj.education.toString() &amp;&amp; obj.education != &quot;&quot;){
//	log.info(&quot;Education NOT Empty&quot;);
	profileScore_Exp += educationScore;
	}
}
if(obj.artifacts.toString() &amp;&amp; obj.artifacts != &quot;&quot;){
//	log.info(&quot;Artifacts NOT Empty&quot;);
	profileScore_Exp += artifactsScore;
}

log.info(&quot;Expected Profile Completeness Score &quot; +profileScore_Exp); // Expected sorted array
log.info(&quot;Actual Profile Completeness Score &quot; +profileScore_act); // Actual Sort value

if(parseInt(profileScore_Exp) != parseInt(profileScore_act)){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Completeness Score is incorrect&quot;);
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Consultant Stats" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/stats</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - Get Consultant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/${cons_Id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Term Of Use" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/termOfUse</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consultant - Get Consultant Matched Jobs" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/match?skip=0&amp;limit=5&amp;sort=scoreDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Profile" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/profile/me</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Job Post - Negative Case Set 1" enabled="true">
          <stringProp name="TestPlan.comments">Ayesha</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send 151 characters in description" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;abcd abcd abcd abcd abcd abcd abcd abcd abcd abcdabcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcdabcd abcd abcd abcd abcd abcd abcd abcd abcd&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1246353452">Job Title cannot be greater than 150 characters</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Null AOE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1516935501">Area of expertise id cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BlankSpaces in AOE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;  &quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1516935501">Area of expertise id cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Null Skill" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="743061271">Skill Id cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send BlankSpaces in Skill Id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;  &quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="743061271">Skill Id cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send letters in AOE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;abcdef&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1098581925">Area of expertise id must contain only numbers &amp; &apos;:&apos; symbol</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send non-existent AOE id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;4:52&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-945287636">category id(s) are invalid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send duplicate AOE id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-244942505">Area of expertise id must be unique</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Skill id of unadded AOE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill52}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2094029378">Skill id(s) does not belong to any category</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send letters in Skill Id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;$abcdef&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1835694437">Skill Id must contain only numbers &amp; &apos;:&apos; symbol</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send duplicate Skill Id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1516832179">Skill Id must be unique</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Job - EmptyDesc" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job - Accept&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Automation Project&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-584324727">description cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Job - Desc&gt;2000" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job - Accept&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Automation Project&quot;,&#xd;
	&quot;description&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-209688933">description should be of less than characters: 2000</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Job - EmptyProjectName" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job&quot;,&#xd;
	&quot;description&quot;: &quot;Test Job Description&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date_midtime},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;));
vars.put(&quot;tz&quot;, vars.get(&quot;tzOffset&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">TZ-Offset</stringProp>
                  <stringProp name="Header.value">${tz}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1869423919">projectName cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Job - ProjectName&gt;150" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job&quot;,&#xd;
	&quot;projectName&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of &quot;,&#xd;
	&quot;description&quot;: &quot;Test Job Description&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date_midtime},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;));
vars.put(&quot;tz&quot;, vars.get(&quot;tzOffset&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">TZ-Offset</stringProp>
                  <stringProp name="Header.value">${tz}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1665287481">projectName should be of less than characters: 150</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Job" enabled="true">
          <stringProp name="TestPlan.comments">Employer Profile create/update: All params with valid values</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Job - For Accept" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job - Accept&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Automation Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Job Description&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date_midtime},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;));
vars.put(&quot;tz&quot;, vars.get(&quot;tzOffset&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">TZ-Offset</stringProp>
                  <stringProp name="Header.value">${tz}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Get JobId" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
log.info(obj.id);
vars.put(&quot;jobPostId&quot;, obj.id);</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Job - For Close" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job - Close&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Automation Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Job Description&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date_midtime},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;));
vars.put(&quot;tz&quot;, vars.get(&quot;tzOffset&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">TZ-Offset</stringProp>
                  <stringProp name="Header.value">${tz}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Get JobId" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
log.info(obj.id);
vars.put(&quot;jobPostId2&quot;, obj.id);</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Job - Future Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job - Future&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Automation Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Job Description&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${current_date},&#xd;
	&quot;startDate&quot;: ${future_date},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;));
vars.put(&quot;tz&quot;, vars.get(&quot;tzOffset&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">TZ-Offset</stringProp>
                  <stringProp name="Header.value">${tz}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Get JobId" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
log.info(obj.id);
vars.put(&quot;jobPostId4&quot;, obj.id);</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Job - For sending job application" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job - For job App&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Automation Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Job Description&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date_midtime},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;));
vars.put(&quot;tz&quot;, vars.get(&quot;tzOffset&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">TZ-Offset</stringProp>
                  <stringProp name="Header.value">${tz}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Get JobId" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
log.info(obj.id);
vars.put(&quot;jobPostId3&quot;, obj.id);</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Skills of Category" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/categories/${AOE_accounting}/skills</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Details" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify isDraft value" enabled="true">
              <stringProp name="JSON_PATH">$.isDraft</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify ProjectName value" enabled="true">
              <stringProp name="JSON_PATH">$.projectName</stringProp>
              <stringProp name="EXPECTED_VALUE">Test Automation Project</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify NonTech value" enabled="true">
              <stringProp name="JSON_PATH">$.nonTechnicalQuestions</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Stats" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/stats</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="EditJob" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSkillsofCategories" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/public/categories/skills</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">This is Finalized Call where all Ids are extracted</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_accounting" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_accounting</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_marketing" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_marketing</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_SoftwareDev" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_SoftwareDev</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_design" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_design</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_IT" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_IT</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_writing" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_writing</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Accounting_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill0;Skill1;Skill2;Skill3;Skill4;Skill5;Skill6;Skill7</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos;)].skills[0].id;$..[?(@.name == &apos;Accounting&apos;)].skills[1].id;$..[?(@.name == &apos;Accounting&apos;)].skills[2].id;$..[?(@.name == &apos;Accounting&apos;)].skills[3].id;$..[?(@.name == &apos;Accounting&apos;)].skills[4].id;$..[?(@.name == &apos;Accounting&apos;)].skills[5].id;$..[?(@.name == &apos;Accounting&apos;)].skills[6].id;$..[?(@.name == &apos;Accounting&apos;)].skills[7].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Marketing_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill8;Skill9;Skill10;Skill11;Skill12;Skill13;Skill14;Skill15;Skill16;Skill17;Skill18;Skill19;Skill20;Skill21;Skill22;Skill23</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos;)].skills[0].id;$..[?(@.name == &apos;Marketing&apos;)].skills[1].id;$..[?(@.name == &apos;Marketing&apos;)].skills[2].id;$..[?(@.name == &apos;Marketing&apos;)].skills[3].id;$..[?(@.name == &apos;Marketing&apos;)].skills[4].id;$..[?(@.name == &apos;Marketing&apos;)].skills[5].id;$..[?(@.name == &apos;Marketing&apos;)].skills[6].id;$..[?(@.name == &apos;Marketing&apos;)].skills[7].id;$..[?(@.name == &apos;Marketing&apos;)].skills[8].id;$..[?(@.name == &apos;Marketing&apos;)].skills[9].id;$..[?(@.name == &apos;Marketing&apos;)].skills[10].id;$..[?(@.name == &apos;Marketing&apos;)].skills[11].id;$..[?(@.name == &apos;Marketing&apos;)].skills[12].id;$..[?(@.name == &apos;Marketing&apos;)].skills[13].id;$..[?(@.name == &apos;Marketing&apos;)].skills[14].id;$..[?(@.name == &apos;Marketing&apos;)].skills[15].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Software Development_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill24;Skill25;Skill26;Skill27;Skill28;Skill29;Skill30;Skill31;Skill32;Skill33;Skill34;Skill35;Skill36;Skill37;Skill38</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos;)].skills[0].id;$..[?(@.name == &apos;Software Development&apos;)].skills[1].id;$..[?(@.name == &apos;Software Development&apos;)].skills[2].id;$..[?(@.name == &apos;Software Development&apos;)].skills[3].id;$..[?(@.name == &apos;Software Development&apos;)].skills[4].id;$..[?(@.name == &apos;Software Development&apos;)].skills[5].id;$..[?(@.name == &apos;Software Development&apos;)].skills[6].id;$..[?(@.name == &apos;Software Development&apos;)].skills[7].id;$..[?(@.name == &apos;Software Development&apos;)].skills[8].id;$..[?(@.name == &apos;Software Development&apos;)].skills[9].id;$..[?(@.name == &apos;Software Development&apos;)].skills[10].id;$..[?(@.name == &apos;Software Development&apos;)].skills[11].id;$..[?(@.name == &apos;Software Development&apos;)].skills[12].id;$..[?(@.name == &apos;Software Development&apos;)].skills[13].id;$..[?(@.name == &apos;Software Development&apos;)].skills[14].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Design_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill39;Skill40;Skill41;Skill42;Skill43;Skill44;Skill45;Skill46;Skill47;Skill48;Skill49;Skill50;Skill51;Skill52;Skill53;Skill54;Skill55;Skill56</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos;)].skills[0].id;$..[?(@.name == &apos;Design&apos;)].skills[1].id;$..[?(@.name == &apos;Design&apos;)].skills[2].id;$..[?(@.name == &apos;Design&apos;)].skills[3].id;$..[?(@.name == &apos;Design&apos;)].skills[4].id;$..[?(@.name == &apos;Design&apos;)].skills[5].id;$..[?(@.name == &apos;Design&apos;)].skills[6].id;$..[?(@.name == &apos;Design&apos;)].skills[7].id;$..[?(@.name == &apos;Design&apos;)].skills[8].id;$..[?(@.name == &apos;Design&apos;)].skills[9].id;$..[?(@.name == &apos;Design&apos;)].skills[10].id;$..[?(@.name == &apos;Design&apos;)].skills[11].id;$..[?(@.name == &apos;Design&apos;)].skills[12].id;$..[?(@.name == &apos;Design&apos;)].skills[13].id;$..[?(@.name == &apos;Design&apos;)].skills[14].id;$..[?(@.name == &apos;Design&apos;)].skills[15].id;$..[?(@.name == &apos;Design&apos;)].skills[16].id;$..[?(@.name == &apos;Design&apos;)].skills[17].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="IT services_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill57;Skill58;Skill59;Skill60;Skill61</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos;)].skills[0].id;$..[?(@.name == &apos;IT Services&apos;)].skills[1].id;$..[?(@.name == &apos;IT Services&apos;)].skills[2].id;$..[?(@.name == &apos;IT Services&apos;)].skills[3].id;$..[?(@.name == &apos;IT Services&apos;)].skills[4].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Writing &amp; Editing_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill62;Skill63;Skill64;Skill65;Skill66;Skill67;Skill68;Skill69;Skill70</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[0].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[1].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[2].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[3].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[4].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[5].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[6].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[7].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[8].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job - For Accept" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job - Updated&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Automation Project - Updated&quot;,&#xd;
	&quot;description&quot;: &quot;Test Job Description&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date_midtime},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
		&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 3&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;));
vars.put(&quot;tz&quot;, vars.get(&quot;tzOffset&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">TZ-Offset</stringProp>
                  <stringProp name="Header.value">${tz}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify isDraft value" enabled="true">
              <stringProp name="JSON_PATH">$.isDraft</stringProp>
              <stringProp name="EXPECTED_VALUE">false</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Details" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify isDraft value" enabled="true">
              <stringProp name="JSON_PATH">$.isDraft</stringProp>
              <stringProp name="EXPECTED_VALUE">false</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify ProjectName value" enabled="true">
              <stringProp name="JSON_PATH">$.projectName</stringProp>
              <stringProp name="EXPECTED_VALUE">Test Automation Project - Updated</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify NonTech value" enabled="false">
              <stringProp name="JSON_PATH">$.nonTechnicalQuestions</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">true</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Employer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;companyName&quot;: &quot;${comp_name}&quot;,&#xd;
	&quot;website&quot;: &quot;&quot;,&#xd;
	&quot;specialities&quot;: [],&#xd;
	&quot;additionalSpecialities&quot;: [&quot;Apps&quot;, &quot;DevOps&quot;],&#xd;
	&quot;companyDescription&quot;: &quot;This is my company&quot;,&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;isHeadquarter&quot;: true&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - GetJobOpenings" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs/openings?skip=0&amp;limit=10&amp;sort=updatedAtDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify JobId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Employers" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/me</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Job Post - Negative Cases Set 1" enabled="true">
          <stringProp name="TestPlan.comments">Ayesha</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send 151 characters in description" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;abcd abcd abcd abcd abcd abcd abcd abcd abcd abcdabcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcd abcdabcd abcd abcd abcd abcd abcd abcd abcd abcd&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1246353452">Job Title cannot be greater than 150 characters</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Null AOE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1516935501">Area of expertise id cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BlankSpaces in AOE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;  &quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1516935501">Area of expertise id cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Null Skill" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="743061271">Skill Id cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send BlankSpaces in Skill Id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;  &quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="743061271">Skill Id cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send letters in AOE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;abcdef&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1098581925">Area of expertise id must contain only numbers &amp; &apos;:&apos; symbol</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send non-existent AOE id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;4:52&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-945287636">category id(s) are invalid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send duplicate AOE id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-244942505">Area of expertise id must be unique</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Skill id of unadded AOE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill52}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2094029378">Skill id(s) does not belong to any category</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send letters in Skill Id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;$abcdef&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1835694437">Skill Id must contain only numbers &amp; &apos;:&apos; symbol</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send duplicate Skill Id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{   &quot;projectName&quot;: &quot;Abcd project&quot;, &#xd;
    &quot;title&quot;: &quot;node.js Developer&quot;,&#xd;
    &quot;description&quot;: &quot;my job description&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
        &#xd;
    },&#xd;
   &quot;locations&quot;: [{&quot;zipCode&quot;:&quot;1245&quot;,&quot;address2&quot;:&quot;&quot;,&quot;city&quot;:&quot;Khi&quot;,&quot;phone&quot;:&quot; (92)-344-25587458&quot;,&quot;address1&quot;:&quot;Parsa Tower&quot;,&quot;rank&quot;:1,&quot;state&quot;:&quot;pak&quot;,&quot;isHeadquarter&quot;:false,&quot;geom&quot;:{&quot;coordinates&quot;:[24.8292364,67.08461989999999],&quot;type&quot;:&quot;Point&quot;},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1639594800440,&#xd;
    &quot;startDate&quot;: 1640977200440,&#xd;
	&quot;endDate&quot;:  1643655599440,&#xd;
    &quot;isOpenEnded&quot;: false,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 60,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: true,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 5,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 18,&#xd;
                &quot;isRequired&quot;: true&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
            &#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
        &#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;technicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my technical Question&quot;,&#xd;
        &quot;urls&quot;: []&#xd;
    },&#xd;
    &quot;nonTechnicalQuestions&quot;: {&#xd;
        &quot;questions&quot;: &quot;Hello this is my behavioral Question&quot;,&#xd;
        &quot;urls&quot;: [ ]&#xd;
    },&#xd;
    &quot;isDraft&quot;:  false&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1516832179">Skill Id must be unique</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job - EmptyDesc" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job - Accept&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Automation Project&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-584324727">description cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job - Desc&gt;2000" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job - Accept&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Automation Project&quot;,&#xd;
	&quot;description&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-209688933">description should be of less than characters: 2000</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job - EmptyProjectName" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job&quot;,&#xd;
	&quot;description&quot;: &quot;Test Job Description&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date_midtime},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;));
vars.put(&quot;tz&quot;, vars.get(&quot;tzOffset&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">TZ-Offset</stringProp>
                  <stringProp name="Header.value">${tz}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1869423919">projectName cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job - ProjectName&gt;150" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job&quot;,&#xd;
	&quot;projectName&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of &quot;,&#xd;
	&quot;description&quot;: &quot;Test Job Description&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date_midtime},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;));
vars.put(&quot;tz&quot;, vars.get(&quot;tzOffset&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">TZ-Offset</stringProp>
                  <stringProp name="Header.value">${tz}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1665287481">projectName should be of less than characters: 150</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Job - Job2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId2}/close</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1287622914">{&quot;status&quot;:&quot;close&quot;}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">48</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Send Job Invite" enabled="true">
          <stringProp name="TestPlan.comments">Employer Profile create/update: All params with valid values</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Invite - JobId Invalid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;consultantIds&quot;:[&quot;${cons_Id}&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${invalid_values}/invite</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045111270">jobId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Invite - JobId Closed" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;consultantIds&quot;:[&quot;${cons_Id}&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId2}/invite</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">This case is failed an issue reported for this</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1766383521">Job is closed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Invite - Consultant Id Invalid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;consultantIds&quot;:[&quot;${invalid_values}&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${invalid_values}/invite</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1906148578">Consultants Id must contain only numbers &amp; &apos;:&apos; symbol</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Invite - Consultant Id Blank" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;consultantIds&quot;:[&quot; &quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/invite</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="170065072">Consultants Id cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Invite - No Consultant Id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/invite</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1660793328">Consultants Id&apos;s must contain at least 1 value</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Invite - Email InvalidShort" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;emails&quot;:[&quot;123&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/invite</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-374764239">Email should be between 7 to 255 character long</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Invite - Email InvalidLong" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;emails&quot;:[&quot;suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346suzair12346@yopmail.com&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/invite</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-374764239">Email should be between 7 to 255 character long</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Invite - Email Empty" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;emails&quot;:[&quot; &quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/invite</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1806253815">Email cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Invite - Email Invalid" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;emails&quot;:[&quot;suzair123 &quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/invite</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1884029965">Invalid Email</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Invite by ID - Happy Case" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;consultantIds&quot;:[&quot;${cons_Id}&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/invite</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Invite by ID - Future Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;consultantIds&quot;:[&quot;${cons_Id}&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId4}/invite</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Future Job</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Invite by Email - Happy Case" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;emails&quot;:[&quot;${cons_email}&quot;]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/invite</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="461893074">${assertion}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get Invites" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Invites - Consultant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/invites</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify JobId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Invites - Employer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/invite</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1968388715">${cons_Id}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All Jobs Invitees - Employer" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs/invites?skip=0&amp;limit=5&amp;sort=dateDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify JobId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Saved Job" enabled="true">
          <stringProp name="TestPlan.comments">Consultant Applying for job</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/${jobPostId}/save</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Job - Again" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/${jobPostId}/save</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Saved Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/save?skip=0&amp;limit=100&amp;sort=scoreDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Saved Job - Invalid JobId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/${invalid_values}/save</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045111270">jobId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Saved Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/${jobPostId}/save</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="784239075">Saved Job Removed Successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Saved Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/save?skip=0&amp;limit=100&amp;sort=scoreDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">52</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Send Job Application" enabled="true">
          <stringProp name="TestPlan.comments">Consultant Applying for job</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Artifact - Tech Url" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryHlhLhG2WOFptFgnJ&#xd;
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;Tulips.jpg&quot;&#xd;
Content-Type: image/jpeg&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryHlhLhG2WOFptFgnJ&#xd;
Content-Disposition: form-data; name=&quot;type&quot;&#xd;
&#xd;
artifact&#xd;
------WebKitFormBoundaryHlhLhG2WOFptFgnJ--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/files</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryHlhLhG2WOFptFgnJ</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TechURL</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.url</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - InvalidComments" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: 1234,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-759280173">Application Comments must be string</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - Invalid JobId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;253525&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;skills&quot;: [&#xd;
			&quot;php&quot;&#xd;
		],&#xd;
		&quot;description&quot;: &quot;Test Description&quot;,&#xd;
		&quot;urls&quot;: [&quot;${artifactURL}&quot;],&#xd;
		&quot;title&quot;: &quot;Test Artifact Title&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;5 year&quot;&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;&quot;,&#xd;
		&quot;urls&quot;: [&quot;&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;&quot;,&#xd;
		&quot;urls&quot;: [&quot;&quot;]&#xd;
	},&#xd;
	&quot;comments&quot;: &quot;This is application comment&quot;,&#xd;
	&quot;isDraft&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045111270">jobId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - Blank JobId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot; &quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;skills&quot;: [&#xd;
			&quot;php&quot;&#xd;
		],&#xd;
		&quot;description&quot;: &quot;Test Description&quot;,&#xd;
		&quot;urls&quot;: [&quot;${artifactURL}&quot;],&#xd;
		&quot;title&quot;: &quot;Test Artifact Title&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;5 year&quot;&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;&quot;,&#xd;
		&quot;urls&quot;: [&quot;&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;&quot;,&#xd;
		&quot;urls&quot;: [&quot;&quot;]&#xd;
	},&#xd;
	&quot;comments&quot;: &quot;This is application comment&quot;,&#xd;
	&quot;isDraft&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-338356411">jobId cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - InvalidNonTechAns" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;abcd&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;abcd&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: 1234,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="242931492">non-technical Answers must be a string</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - InvalidTechAns" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;abcd&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: 1235,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;abc&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1343035356">technical Answers must be a string</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - Invalid isDraft" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: &quot;abc&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1125504369">Job isDraft should be of type boolean</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - isDraft Blank" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;behavioralAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: 2&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1125504369">Job isDraft should be of type boolean</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application for Closed Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId2}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;behavioralAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - TechAns&gt;2000" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ceIt has survived not only five ceIt was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ceIt has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1280556586">technical Answers should be less than 2000 characters</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - TechAnsURLInvalid" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;123&quot;]&#xd;
	},&#xd;
	&quot;behavioralAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045111270">jobId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - NonTechAns&gt;2000" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ceIt has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ceIt has survived not only five ceIt has survived not only five ceIt has survived not only five ceIt has survived not only five ceIt has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1192758570">non-technical Answers should be less than 2000 characters</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - NonTechAnsURLInvalid" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;behavioralAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;123&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045111270">jobId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - Comments&gt;2000" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ceIt has survived not only five ceIt was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ceIt has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;abcd&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;abcd&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-253389870">Applicaiton Comments should be less than 2000 characters</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - Happy Case" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get app_id" enabled="true">
              <stringProp name="VAR">app_id</stringProp>
              <stringProp name="JSONPATH">id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - Future Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId4}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get app_id" enabled="true">
              <stringProp name="VAR">app_id2</stringProp>
              <stringProp name="JSONPATH">id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Application - Again" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get app_id" enabled="false">
              <stringProp name="VAR">app_id</stringProp>
              <stringProp name="JSONPATH">id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Job Application" enabled="true">
          <stringProp name="TestPlan.comments">Consultant Applying for job</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - InvalidComments" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: 1234,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-759280173">Application Comments must be string</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - Invalid JobId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${invalid_values}&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;skills&quot;: [&#xd;
			&quot;php&quot;&#xd;
		],&#xd;
		&quot;description&quot;: &quot;Test Description&quot;,&#xd;
		&quot;urls&quot;: [&quot;${artifactURL}&quot;],&#xd;
		&quot;title&quot;: &quot;Test Artifact Title&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;5 year&quot;&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;&quot;,&#xd;
		&quot;urls&quot;: [&quot;&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;&quot;,&#xd;
		&quot;urls&quot;: [&quot;&quot;]&#xd;
	},&#xd;
	&quot;comments&quot;: &quot;This is application comment&quot;,&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045111270">jobId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - Blank JobId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot; &quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;skills&quot;: [&#xd;
			&quot;php&quot;&#xd;
		],&#xd;
		&quot;description&quot;: &quot;Test Description&quot;,&#xd;
		&quot;urls&quot;: [&quot;${artifactURL}&quot;],&#xd;
		&quot;title&quot;: &quot;Test Artifact Title&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;5 year&quot;&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;&quot;,&#xd;
		&quot;urls&quot;: [&quot;&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;&quot;,&#xd;
		&quot;urls&quot;: [&quot;&quot;]&#xd;
	},&#xd;
	&quot;comments&quot;: &quot;This is application comment&quot;,&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-338356411">jobId cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - InvalidnonTechAns" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;abcd&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;abcd&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: 1234,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="242931492">non-technical Answers must be a string</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - InvalidTechAns" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;abcd&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: 1235,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;abc&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1343035356">technical Answers must be a string</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - Invalid isDraft" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: &quot;abc&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1125504369">Job isDraft should be of type boolean</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - isDraft Blank" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: 2&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">				</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1125504369">Job isDraft should be of type boolean</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - TechAns&gt;2000" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ceIt has survived not only five ceIt was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ceIt has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1280556586">technical Answers should be less than 2000 characters</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - TechAnsURLInvalid" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;123&quot;]&#xd;
	},&#xd;
	&quot;behavioralAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045111270">jobId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - nonTechAns&gt;2000" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ceIt has survived not only five ceIt has survived not only five ceIt has survived not only five ceIt has survived not only five ceIt has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1192758570">non-technical Answers should be less than 2000 characters</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - NonTechAnsURLInvalid" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;behavioralAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;123&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045111270">jobId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - Comments&gt;2000" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ceIt has survived not only five ceIt was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ceIt has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;abcd&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;abcd&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-253389870">Applicaiton Comments should be less than 2000 characters</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - Closed Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
		&quot;jobId&quot;: &quot;${jobPostId2}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;behavioralAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - isDraft true" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
		&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045111270">jobId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All Applicants - Before sending application" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/applicants</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - InvalidAppId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
		&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${invalid_values}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify HTTP Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51512">404</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1388554381">Application does not exist</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - Job App for isDraft Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId3}&quot;,&#xd;
	&quot;comments&quot;: &quot;&quot;,&#xd;
    &quot;artifacts&quot;: [],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Test Answer&quot;,&#xd;
		&quot;urls&quot;: [&quot;&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Test Answer&quot;,&#xd;
		&quot;urls&quot;: [&quot;&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="259624513">Cannot apply for this job</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Application - HappyCase" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;comments&quot;: &quot;&quot;,&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;${cons_title}&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;${cons_relatedExperience}&quot;,&#xd;
		&quot;skills&quot;: [&quot;${cons_skills}&quot;],&#xd;
		&quot;urls&quot;: [&quot;${cons_art_url}&quot;]&#xd;
	}],&#xd;
	&quot;technicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Test Answer&quot;,&#xd;
		&quot;urls&quot;: [&quot;&quot;]&#xd;
	},&#xd;
	&quot;nonTechnicalAnswers&quot;: {&#xd;
		&quot;answers&quot;: &quot;Test Answer&quot;,&#xd;
		&quot;urls&quot;: [&quot;&quot;]&#xd;
	},&#xd;
	&quot;isDraft&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045111270">jobId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All Applicants - After sending application" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/applicants</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1968388715">${cons_Id}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consultant - Get Consultant Applications" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/applications?skip=0&amp;limit=30&amp;sort=scoreDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Application" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(api_version)}/applications/${app_id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="520889244">${jobPostId}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">48</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - Get Employer Applications" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/applications?skip=0&amp;limit=100&amp;sort=scoreDesc</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1820167443">${app_id}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">48</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">48</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Job - Get Score" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/consultants/${cons_Id}/score</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">48</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Job Offer" enabled="true">
          <stringProp name="TestPlan.comments">Employer offering Job</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - InvalidJobId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;253525&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045111270">jobId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - BlankJobId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot; &quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-338356411">jobId cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - Invalid Consultant Id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;:  &quot;253525&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2098421416">Consultant does not exist</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - Blank Consultant Id" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;:  &quot; &quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1625723261">consultantId cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - ProjectName &gt; 150" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;14:517&quot;,&#xd;
	&quot;consultantId&quot;: &quot;13:94&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1665287481">projectName should be of less than characters: 150</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - Desc &gt; 2000" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-209688933">description should be of less than characters: 2000</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - BlankDesc" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-584324727">description cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - Hours&lt;1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;:  &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: -1,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="613371295">Offer hoursPerWeek cannot be less than 1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - HoursNOTnumber" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;:  &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: &quot;abc&quot;,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="828493928">Offer hoursPerWeek must be a number</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - Hours&gt;41" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;:  &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 50,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1552532476">Offer hoursPerWeek cannot be greater than 41</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - HourlyRate&lt;1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;:  &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 4,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: -1,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1285543063">hourlyPayRate should be greater than 1 and less than 99999</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - HourlyRate&gt;100000" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;:  &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 4,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 10000000,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1285543063">hourlyPayRate should be greater than 1 and less than 99999</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - HourlyRateNOTNumber" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;:  &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 4,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: &quot;abc&quot;,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="709572528">hourlyPayRate must be a integer</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - InvalidStartDate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;:  &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 4,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: &quot;abc&quot;,&#xd;
	&quot;hourlyPayRate&quot;: 10,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1933579563">Invalid Start Date</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - Closed Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
		&quot;jobId&quot;: &quot;${jobPostId2}&quot;,&#xd;
	&quot;consultantId&quot;:  &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 4,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 10,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1766383521">Job is closed</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - Invalid isOpenEnded" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
		&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;:  &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 4,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 10,&#xd;
	&quot;isOpenEnded&quot;: &quot;abc&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-413301121">isOpenEnded should be a boolean</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - Happy Case" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Senior JAVA Developer&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Automation Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: ${current_date},&#xd;
	&quot;hourlyPayRate&quot;: 5,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get OfferId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">offerId</stringProp>
              <stringProp name="RegexExtractor.regex">\,&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consultant - SubmitReview - HappyCase" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: ${cons_rating},&#xd;
	&quot;attributes&quot;: [&quot;${review_att1}&quot;],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - SubmitReview - HappyCase" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: ${emp_rating},&#xd;
	&quot;attributes&quot;: [&quot;${review_att1}&quot;, &quot;${review_att2}&quot;],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - Future Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId4}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: ${future_date},&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get OfferId" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">offerId2</stringProp>
              <stringProp name="RegexExtractor.regex">\,&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Send Job Offer - Again" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1482343137">Something Bad Happened!</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Job Offer" enabled="true">
          <stringProp name="TestPlan.comments">Employer offering Job</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Offer - InvalidOfferId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;253525&quot;,&#xd;
	&quot;consultantId&quot;: &quot;13:94&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/1234</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1334681831">Offer does not exist</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51512">404</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Offer - ProjectName &gt; 150" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;14:560&quot;,&#xd;
	&quot;consultantId&quot;: &quot;13:94&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@34Asdf!@&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1665287481">projectName should be of less than characters: 150</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Offer - Desc &gt; 2000" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;14:560&quot;,&#xd;
	&quot;consultantId&quot;: &quot;13:94&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-209688933">description should be of less than characters: 2000</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Offer - Hours&lt;1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;14:560&quot;,&#xd;
	&quot;consultantId&quot;: &quot;13:94&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: -1,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="613371295">Offer hoursPerWeek cannot be less than 1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Offer - HoursNOTnumber" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;14:560&quot;,&#xd;
	&quot;consultantId&quot;: &quot;13:94&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: &quot;abc&quot;,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="828493928">Offer hoursPerWeek must be a number</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Offer - Hours&gt;41" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;14:560&quot;,&#xd;
	&quot;consultantId&quot;: &quot;13:94&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 50,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1552532476">Offer hoursPerWeek cannot be greater than 41</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Offer - HourlyRate&lt;1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;14:560&quot;,&#xd;
	&quot;consultantId&quot;: &quot;13:94&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 4,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: -1,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1285543063">hourlyPayRate should be greater than 1 and less than 99999</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Offer - HourlyRate&gt;100000" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;14:560&quot;,&#xd;
	&quot;consultantId&quot;: &quot;13:94&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 4,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 10000000,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1285543063">hourlyPayRate should be greater than 1 and less than 99999</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Offer - HourlyRateNOTNumber" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;14:560&quot;,&#xd;
	&quot;consultantId&quot;: &quot;13:94&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 4,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: &quot;abc&quot;,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="709572528">hourlyPayRate must be a integer</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Offer - InvalidStartDate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;14:560&quot;,&#xd;
	&quot;consultantId&quot;: &quot;13:94&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 4,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: &quot;abc&quot;,&#xd;
	&quot;hourlyPayRate&quot;: 10,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1933579563">Invalid Start Date</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Offer - Invalid isOpenEnded" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;14:560&quot;,&#xd;
	&quot;consultantId&quot;: &quot;13:94&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 4,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 10,&#xd;
	&quot;isOpenEnded&quot;: &quot;abc&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-413301121">isOpenEnded should be a boolean</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job Offer - Happy Case" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;,&#xd;
	&quot;consultantName&quot;: &quot;Test Application&quot;,&#xd;
	&quot;jobTitle&quot;: &quot;Test Automation JOB&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Description&quot;,&#xd;
	&quot;hoursPerWeek&quot;: 10,&#xd;
	&quot;location&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;isRemote&quot;: false,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		}&#xd;
	},&#xd;
	&quot;startDate&quot;: 1505978824331,&#xd;
	&quot;hourlyPayRate&quot;: 2,&#xd;
	&quot;isOpenEnded&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Consultant ID" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">offerId</stringProp>
              <stringProp name="RegexExtractor.regex">\,&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get Offers" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Offer - Consultant" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/offers?skip=0&amp;limit=100&amp;sort=scoreDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify OfferId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1768281245">${offerId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get All offers - Employer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/offers</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify OfferId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1768281245">${offerId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer Letter - InvalidId" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/12345/download</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51512">404</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1334681831">Offer does not exist</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Offer - Get Offer Letter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/download</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer - InvalidId" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/1234</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51512">404</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify OfferId" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1768281245">${offerId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1334681831">Offer does not exist</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Offer - Get Offer" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify OfferId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1768281245">${offerId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Job offer Status - Consultant" enabled="true">
          <stringProp name="TestPlan.comments">Consultant Part</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job offer Status - Empty Terms" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;accept&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-739846056">termAndConditionId cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job offer Status - Invalid Terms" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;accept&quot;,&#xd;
    &quot;termAndConditionId&quot;: &quot;1234&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1636887635">termAndConditionId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job offer Status - Invalid Reason" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;accept&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: 112412414&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-433690671">reason cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job offer Status - Reason&gt;2000" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;reject&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce Lorem Ipsum has been the industry&apos;s standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five ce&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Failed Case</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="569806051">reason should be of less than characters: 2000</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job offer Status - Empty Reason" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;reject&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-433690671">reason cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job offer Status - Invalid Status type" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: 123,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="638159231">status cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job offer Status - Invalid Status" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;abcd&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="740597153">status for consultant should be either &apos;open&apos; or &apos;close&apos; or &apos;cancel&apos;       and for employer should be either &apos;accept&apos; or &apos;reject&apos;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job offer Status - Invalid OfferId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;reject&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;ABCD&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/1234/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51512">404</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1334681831">Offer does not exist</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job offer Status - Reject" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;reject&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Test Reason&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1768281245">${offerId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-934710369">reject</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get app_id" enabled="false">
              <stringProp name="VAR">app_id</stringProp>
              <stringProp name="JSONPATH">id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job offer Status - Accept after rejection" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;accept&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Test Reason&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="186337257">Offer already rejected or closed or canceled</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job Offer - Change accepted to open" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;open&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Test Reason&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="740597153">status for consultant should be either &apos;open&apos; or &apos;close&apos; or &apos;cancel&apos;       and for employer should be either &apos;accept&apos; or &apos;reject&apos;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job Offer - Change accepted to Cancel" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;cancel&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Test Reason&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="740597153">status for consultant should be either &apos;open&apos; or &apos;close&apos; or &apos;cancel&apos;       and for employer should be either &apos;accept&apos; or &apos;reject&apos;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job Offer - Change accepted to Close" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;close&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Test Reason&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="740597153">status for consultant should be either &apos;open&apos; or &apos;close&apos; or &apos;cancel&apos;       and for employer should be either &apos;accept&apos; or &apos;reject&apos;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Emp Update Job offer StatusAccept - Negative Case" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;accept&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Test Reason&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Emp Update Job offer StatusReject - Negative Case" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;reject&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Test Reason&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Emp Update Job offer Status - Open" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;open&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Test Reason&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1768281245">${offerId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3417674">open</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job offer Status - Accept" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;accept&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Test Reason&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1768281245">${offerId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1423461112">accept</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get app_id" enabled="false">
              <stringProp name="VAR">app_id</stringProp>
              <stringProp name="JSONPATH">id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Emp Update Job offer Status - Open" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;open&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Test Reason&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId2}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Future Job</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1032304758">${jobPostId4}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId2}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Offer Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1017858453">${offerId2}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3417674">open</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get app_id" enabled="false">
              <stringProp name="VAR">app_id</stringProp>
              <stringProp name="JSONPATH">id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Cons Update Job offer Status - Accept" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;accept&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Test Reason&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId2}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1032304758">${jobPostId4}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId2}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify offer Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1017858453">${offerId2}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1423461112">accept</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get app_id" enabled="false">
              <stringProp name="VAR">app_id</stringProp>
              <stringProp name="JSONPATH">id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Invoice" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Invoice - Invalid JobId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;contractedHours&quot;: 20,&#xd;
    &quot;remainingHours&quot;: 15,&#xd;
    &quot;workLog&quot;: [&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 25&#xd;
        },&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 15&#xd;
        }&#xd;
    ],&#xd;
    &quot;comments&quot;: &quot;testing comments&quot;,&#xd;
	&quot;jobId&quot;: &quot;1234&quot;,&#xd;
    &quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/invoices</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045111270">jobId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Invoice - Blank JobId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;contractedHours&quot;: 20,&#xd;
    &quot;remainingHours&quot;: 15,&#xd;
    &quot;workLog&quot;: [&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 25&#xd;
        },&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 15&#xd;
        }&#xd;
    ],&#xd;
    &quot;comments&quot;: &quot;testing comments&quot;,&#xd;
	&quot;jobId&quot;: &quot; &quot;,&#xd;
    &quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/invoices</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-338356411">jobId cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Invoice - Invalid ConsId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;contractedHours&quot;: 20,&#xd;
    &quot;remainingHours&quot;: 15,&#xd;
    &quot;workLog&quot;: [&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 25&#xd;
        },&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 15&#xd;
        }&#xd;
    ],&#xd;
    &quot;comments&quot;: &quot;testing comments&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
    &quot;consultantId&quot;: &quot;1234&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/invoices</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1075230075">Consultant Id must contain only numbers &amp; &apos;:&apos; symbol</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Invoice - Blank ConsId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;contractedHours&quot;: 20,&#xd;
    &quot;remainingHours&quot;: 15,&#xd;
    &quot;workLog&quot;: [&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 25&#xd;
        },&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 15&#xd;
        }&#xd;
    ],&#xd;
    &quot;comments&quot;: &quot;testing comments&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
    &quot;consultantId&quot;: &quot; &quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/invoices</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1604971923">Consultant Id cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Invoice - Invalid ContractedHours" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;contractedHours&quot;: -1,&#xd;
    &quot;remainingHours&quot;: 15,&#xd;
    &quot;workLog&quot;: [&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 25&#xd;
        },&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 15&#xd;
        }&#xd;
    ],&#xd;
    &quot;comments&quot;: &quot;testing comments&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
    &quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/invoices</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1237327862">contractedHours cannot be less than 0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Invoice - Invalid RemHours" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;contractedHours&quot;: 20,&#xd;
    &quot;remainingHours&quot;: -1,&#xd;
    &quot;workLog&quot;: [&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 25&#xd;
        },&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 15&#xd;
        }&#xd;
    ],&#xd;
    &quot;comments&quot;: &quot;testing comments&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
    &quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/invoices</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-836780015">remainingHours cannot be less than 0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Invoice - WorkLog BackDate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;contractedHours&quot;: 2,&#xd;
    &quot;remainingHours&quot;: 15,&#xd;
    &quot;workLog&quot;: [&#xd;
        {&#xd;
            &quot;date&quot;: ${past_date},&#xd;
            &quot;hoursWorked&quot;: 25&#xd;
        },&#xd;
        {&#xd;
            &quot;date&quot;: ${past_date},&#xd;
            &quot;hoursWorked&quot;: 15&#xd;
        }&#xd;
    ],&#xd;
    &quot;comments&quot;: &quot;testing comments&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
    &quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/invoices</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1856781150">workLog date should be greater than or equal to contractStartDate</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Invoice - FutureDate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;contractedHours&quot;: 20,&#xd;
    &quot;remainingHours&quot;: 15,&#xd;
    &quot;workLog&quot;: [&#xd;
        {&#xd;
            &quot;date&quot;: ${future_date},&#xd;
            &quot;hoursWorked&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;date&quot;: ${future_date},&#xd;
            &quot;hoursWorked&quot;: 15&#xd;
        }&#xd;
    ],&#xd;
    &quot;comments&quot;: &quot;testing comments&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
    &quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/invoices</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1625723261">consultantId cannot be empty</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Invoice - Invalid WorkLog Hours" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;contractedHours&quot;: 20,&#xd;
    &quot;remainingHours&quot;: 15,&#xd;
    &quot;workLog&quot;: [&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date_addhours},&#xd;
            &quot;hoursWorked&quot;: -5&#xd;
        },&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date_addhours},&#xd;
            &quot;hoursWorked&quot;: 15&#xd;
        }&#xd;
    ],&#xd;
    &quot;comments&quot;: &quot;testing comments&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
    &quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/invoices</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1958334923">workLog hoursWorked cannot be less than 1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Invoice - Happy Flow" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;contractedHours&quot;: 20,&#xd;
    &quot;remainingHours&quot;: 15,&#xd;
    &quot;workLog&quot;: [&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date_addhours},&#xd;
            &quot;hoursWorked&quot;: ${hour_1}&#xd;
        },&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date_addhours},&#xd;
            &quot;hoursWorked&quot;: ${hour_2}&#xd;
        }&#xd;
    ],&#xd;
    &quot;comments&quot;: &quot;testing comments&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
    &quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/invoices</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get TotalAmount" enabled="true">
              <stringProp name="VAR">amount</stringProp>
              <stringProp name="JSONPATH">$.totalAmount</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Invoice Amount JSR" enabled="true">
              <stringProp name="TestPlan.comments">Here We are Verifying Total Amount</stringProp>
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">try {
int amount_act = Integer.parseInt(vars.get(&quot;amount&quot;));
int hour1_exp =Integer.parseInt(vars.get(&quot;hour_1&quot;));
int hour2_exp= Integer.parseInt(vars.get(&quot;hour_2&quot;));
int hourly_rate_exp= Integer.parseInt(vars.get(&quot;hourly_rate&quot;));
int amount_exp = (hour1_exp + hour2_exp)*hourly_rate_exp;

if(amount_exp != amount_act ){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Total amount is incorrect &quot; + amount_exp);
}
}
catch (Throwable ex) {
    log.error(&quot;Error in Beanshell&quot;, ex);
    throw ex;
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Invoice - Future Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;contractedHours&quot;: 20,&#xd;
    &quot;remainingHours&quot;: 15,&#xd;
    &quot;workLog&quot;: [&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 25&#xd;
        },&#xd;
        {&#xd;
            &quot;date&quot;: ${current_date},&#xd;
            &quot;hoursWorked&quot;: 15&#xd;
        }&#xd;
    ],&#xd;
    &quot;comments&quot;: &quot;testing comments&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId4}&quot;,&#xd;
    &quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/invoices</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1032304758">${jobPostId4}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Job offer Status - Employer" enabled="true">
          <stringProp name="TestPlan.comments">Employer Part</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Emp Update Job Offer - Change accepted to open" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;open&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Test Reason&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="929073107">Offer already accepted</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1768281245">${offerId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-934710369">reject</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Emp Update Job Offer - Change accepted to Close" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;status&quot;: &quot;close&quot;,&#xd;
   &quot;termAndConditionId&quot;: &quot;${term_id}&quot;,&#xd;
    &quot;reason&quot;: &quot;Test Reason&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}/status</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Offer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/offers/${offerId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Job Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1768281245">${offerId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="94756344">close</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Get app_id" enabled="false">
              <stringProp name="VAR">app_id</stringProp>
              <stringProp name="JSONPATH">id</stringProp>
              <stringProp name="DEFAULT"></stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Invoice - Offer is closed" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;contractedHours&quot;: 20,&#xd;
    &quot;remainingHours&quot;: 15,&#xd;
    &quot;workLog&quot;: [&#xd;
        {&#xd;
            &quot;date&quot;: ${future_date},&#xd;
            &quot;hoursWorked&quot;: 25&#xd;
        },&#xd;
        {&#xd;
            &quot;date&quot;: ${future_date},&#xd;
            &quot;hoursWorked&quot;: 15&#xd;
        }&#xd;
    ],&#xd;
    &quot;comments&quot;: &quot;testing comments&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
    &quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/invoices</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ContractReviews" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - GetReviewAttributes" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/reviewAttributes</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify JobId" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consultant - GetReviewAttributes" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/reviewAttributes</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify JobId" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SubmitReviews" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SubmitReview - InvalidRating" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: &quot;abcd&quot;,&#xd;
	&quot;attributes&quot;: [&quot;Communication&quot;, &quot;Job Description&quot;],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ErrorMessage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2128888621">review rating should be a number</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SubmitReview - IncorrectReview" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: 3,&#xd;
	&quot;attributes&quot;: [&quot;ABCD&quot;],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ErrorMessage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1220702031">attributes value is not valid</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SubmitReview - InvalidReview" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: 3,&#xd;
	&quot;attributes&quot;: [1234],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ErrorMessage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-988642917">attributes item must be string</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SubmitReview - NoRating" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&#xd;
	&quot;attributes&quot;: [&quot;Communication&quot;, &quot;Job Description&quot;],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ErrorMessage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="174990066">review rating cannot be empty</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SubmitReview - NoAttributes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: 3,&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ErrorMessage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-193172522">attributes can not be empty</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SubmitReview - InvalidJobId" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: 3,&#xd;
	&quot;attributes&quot;: [&quot;Communication&quot;, &quot;Job Description&quot;],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
	&quot;jobId&quot;: &quot;1234&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ErrorMessage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2045111270">jobId format is not valid</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SubmitReview - InvalidConsId" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: 3,&#xd;
	&quot;attributes&quot;: [&quot;Communication&quot;, &quot;Job Description&quot;],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;1234&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ErrorMessage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1075230075">Consultant Id must contain only numbers &amp; &apos;:&apos; symbol</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SubmitReview - NoJob" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: 3,&#xd;
	&quot;attributes&quot;: [&quot;Communication&quot;, &quot;Job Description&quot;],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ErrorMessage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-338356411">jobId cannot be empty</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SubmitReview - NoCons" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: 3,&#xd;
	&quot;attributes&quot;: [&quot;Communication&quot;, &quot;Job Description&quot;],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
		&quot;jobId&quot;: &quot;${jobPostId}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ErrorMessage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1604971923">Consultant Id cannot be empty</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - SubmitReview - HappyCase" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: ${emp_rating},&#xd;
	&quot;attributes&quot;: [&quot;${review_att1}&quot;, &quot;${review_att2}&quot;],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">emp_review_id</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Rating" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1553479470">${emp_rating}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Attribute1" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="736907133">${review_att1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Attribute2" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="736907164">${review_att2}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - SubmitReviewAgain" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: 3,&#xd;
	&quot;attributes&quot;: [&quot;Communication&quot;, &quot;Job Description&quot;],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ErrorMessage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1482343137">Something Bad Happened!</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consultant - SubmitReview - HappyCase" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: ${cons_rating},&#xd;
	&quot;attributes&quot;: [&quot;${review_att1}&quot;],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49587">201</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cons_review_id</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Rating" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1048416713">${cons_rating}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Attribute1" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="736907133">${review_att1}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consultant - SubmitReviewAgain" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;rating&quot;: 3,&#xd;
	&quot;attributes&quot;: [&quot;Communication&quot;, &quot;Job Description&quot;],&#xd;
	&quot;comments&quot;: &quot;Test Desc&quot;,&#xd;
	&quot;jobId&quot;: &quot;${jobPostId}&quot;,&#xd;
	&quot;consultantId&quot;: &quot;${cons_Id}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ErrorMessage" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1482343137">Something Bad Happened!</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - Get Review -IncorrectId" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews/1234</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-198641291">reviewId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consultant - Get Review - IncorrectId" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews/1234</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-198641291">reviewId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - GetOwnReview" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews/${emp_review_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify JobId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Rating" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1553479470">${emp_rating}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Attribute1" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="736907133">${review_att1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Attribute2" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="736907164">${review_att2}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consultant - GetOwnReview" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews/${cons_review_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify JobId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Rating" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1048416713">${cons_rating}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Attribute1" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="736907133">${review_att1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - GetConsReview" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews/${cons_review_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify JobId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Rating" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1048416713">${cons_rating}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Attribute1" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="736907133">${review_att1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consultant - GetEmpReview" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/reviews/${emp_review_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify JobId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Rating" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1553479470">${emp_rating}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Attribute1" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="736907133">${review_att1}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Attribute2" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="736907164">${review_att2}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GetHired-Upcoming" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - Get Hired Jobs" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/hired?type=upcoming&amp;skip=0&amp;limit=5&amp;sort=scoreDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consultant - Get Hired Jobs" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=upcoming&amp;skip=0&amp;limit=5&amp;sort=scoreDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CloseAllJobCalls" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Job - Invalid JobId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/12345/close</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2045111270">jobId format is not valid</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Job - Job1" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/close</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1287622914">{&quot;status&quot;:&quot;close&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Job - Job3" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId3}/close</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1287622914">{&quot;status&quot;:&quot;close&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Job - Job4" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId4}/close</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1287622914">{&quot;status&quot;:&quot;close&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer - Get Archived Jobs" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs/archived?skip=0&amp;limit=5&amp;sort=dateDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify JobId" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="520889244">${jobPostId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Consultant - UpdateConsultantAvailability" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Consultant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/me</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.isAvailable</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Availability - Invalid status" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/availability/abc</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="240439826">isAvailable should be either &apos;true&apos; or &apos;false&apos;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Consultant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/me</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.isAvailable</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Availability - Invalid status0" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/availability/0</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="240439826">isAvailable should be either &apos;true&apos; or &apos;false&apos;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Consultant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/me</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.isAvailable</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Availability - False status" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/availability/false</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-422813351">Successfully updated availability</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Consultant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/me</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.isAvailable</stringProp>
              <stringProp name="EXPECTED_VALUE">false</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Availability - True status" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/availability/true</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-422813351">Successfully updated availability</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Current Consultant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/me</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="jp@gc - JSON Path Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.isAvailable</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Upload Photo" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ConsultantUpload Photo - Happy Flow" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;photo&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/files/photo</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-816474812">User photo uploaded successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EmployerUpload Photo - Happy Flow" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;photo&quot;: &quot;&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/files/photo</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-816474812">User photo uploaded successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Employer - Save Consultant" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Saved Consultants" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/saveConsultants</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Consultant Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1968388715">${cons_Id}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">52</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Consultant - Invalid ConsId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/saveConsultants/1234</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1075230075">Consultant Id must contain only numbers &amp; &apos;:&apos; symbol</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Consultant" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/saveConsultants/${cons_Id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1123614587">Consultant Saved Successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Save Consultant - Again" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/saveConsultants/${cons_Id}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1482343137">Something Bad Happened!</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Saved Consultants" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/saveConsultants</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Consultant Id" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1968388715">${cons_Id}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Consultant - Invalid ConsId" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/saveConsultants/1234</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1075230075">Consultant Id must contain only numbers &amp; &apos;:&apos; symbol</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Consultant" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/saveConsultants/${cons_Id}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-212623277">Saved Consultant Removed Successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete Consultant - Again" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/saveConsultants/${cons_Id}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-212623277">Saved Consultant Removed Successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Sorting" enabled="false">
          <stringProp name="TestPlan.comments">This wont be working along with functional automation scripts</stringProp>
        </GenericController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Employer" enabled="true"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Openings Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get Job Openings updatedAtDesc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs/openings?skip=0&amp;limit=5&amp;sort=updatedAtDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">updatedAt</stringProp>
                  <stringProp name="JSONPATH">$..updatedAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">updatedAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..updatedAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;updatedAt_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6
//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6

//var strtDate_act = vars.get(&quot;updatedAt_ALL&quot;);

var date_string = vars.get(&quot;updatedAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})


if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
	AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Date Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get Job Openings updatedAtAsc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs/openings?skip=0&amp;limit=5&amp;sort=updatedAtAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">updatedAt</stringProp>
                  <stringProp name="JSONPATH">$..updatedAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">updatedAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..updatedAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;updatedAt_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;updatedAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
		AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Date Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get Job OpeningsTitleASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs/openings?skip=0&amp;limit=5&amp;sort=titleAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">title</stringProp>
                  <stringProp name="JSONPATH">$..title</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">title</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..title</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Title ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortRevString(a,b) {
 
    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &gt; b) //sort string ascending
        return -1 
    if (a &lt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

function sortString(a,b) {

    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &lt; b) //sort string ascending
        return -1 
    if (a &gt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

log.info(vars.get(&quot;title_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6

var title_string = vars.get(&quot;title_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

var title_act = title_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&quot;,&quot;)

var title_actual = [];
for (var i = 0; i &lt; title_act.length; i++) {
    title_actual.push(title_act[i].toLowerCase());
}

if(title_actual.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var title_exp = title_actual.slice().sort(sortString);
	log.info(title_exp); // Ascending sort
	log.info(title_actual); // Actual Sort value

var compare_status = title_exp.length == title_actual.length &amp;&amp; title_exp.every(function(element, index) {
    return element === title_actual[index]; 
});

log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Ascending Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get Job OpeningsTitleDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs/openings?skip=0&amp;limit=5&amp;sort=titleDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">title</stringProp>
                  <stringProp name="JSONPATH">$..title</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">title</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..title</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Title DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortRevString(a,b) {
 
    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &gt; b) //sort string ascending
        return -1 
    if (a &lt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

function sortString(a,b) {

    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &lt; b) //sort string ascending
        return -1 
    if (a &gt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

//log.info(vars.get(&quot;title_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6

var title_string = vars.get(&quot;title_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

var title_act = title_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&quot;,&quot;)

var title_actual = [];
for (var i = 0; i &lt; title_act.length; i++) {
    title_actual.push(title_act[i].toLowerCase());
}

if(title_actual.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
		AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var title_exp = title_actual.slice().sort(sortRevString);
	log.info(&quot;Calculted Value &quot; + title_exp); // Ascending sort
	log.info(&quot;Actual Value &quot; + title_actual); // Actual Sort value

var compare_status = title_exp.length == title_actual.length &amp;&amp; title_exp.every(function(element, index) {
    return element === title_actual[index]; 
});

log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Descending Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Invites Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get Invites Score DESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs/invites?skip=0&amp;limit=5&amp;sort=scoreDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..matchResult.score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..matchResult.score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;score_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;score_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
		AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get Invites Score ASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs/invites?skip=0&amp;limit=5&amp;sort=scoreAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..matchResult.score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..matchResult.score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;score_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;score_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
		AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Applications Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get All Applications Score DESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/applications?skip=0&amp;limit=5&amp;sort=scoreDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}

function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;score_ALL&quot;)); // [52,49.7,46.8,37.33,32.6]

var score_string = vars.get(&quot;score_ALL&quot;); //[52,49.7,46.8,37.33,32.6]

//var a = &quot;1,2,3,4&quot;;
var arr = [];
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}

}) // 35.8,35.5,30.8,25.2,24.6

log.info(score_act.length.toString())

if(score_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
		AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var score_exp = score_act.slice().sort(sortNumber).reverse();
	log.info(score_exp); // Descending sort
	log.info(score_act); // Actual Sort value
	var compare_status = arraysEqual(score_exp, score_act);
	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get All Applications Score ASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/applications?skip=0&amp;limit=5&amp;sort=scoreAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}

function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;score_ALL&quot;)); // 9.65,9.8,13.8,16,17

var score_string = vars.get(&quot;score_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

//var a = &quot;1,2,3,4&quot;;
var arr = [];
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}

}) // 35.8,35.5,30.8,25.2,24.6

log.info(score_act.length.toString())

if(score_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
		AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var score_exp = score_act.slice().sort(sortNumber);
	log.info(score_exp); // Descending sort
	log.info(score_act); // Actual Sort value
	var compare_status = arraysEqual(score_exp, score_act);
	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get All Applications PayRate DESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/applications?skip=0&amp;limit=5&amp;sort=hourlyPayRateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}

function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;minRate_ALL&quot;)); // [52,49.7,46.8,37.33,32.6]

var score_string = vars.get(&quot;minRate_ALL&quot;); //[52,49.7,46.8,37.33,32.6]

//var a = &quot;1,2,3,4&quot;;
var arr = [];
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}

}) // 35.8,35.5,30.8,25.2,24.6

log.info(score_act.length.toString())

if(score_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
		AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var score_exp = score_act.slice().sort(sortNumber).reverse();
	log.info(score_exp); // Descending sort
	log.info(score_act); // Actual Sort value
	var compare_status = arraysEqual(score_exp, score_act);
	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get All Applications PayRate ASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/applications?skip=0&amp;limit=5&amp;sort=hourlyPayRateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}

function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;minRate_ALL&quot;)); // [52,49.7,46.8,37.33,32.6]

var score_string = vars.get(&quot;minRate_ALL&quot;); //[52,49.7,46.8,37.33,32.6]

//var a = &quot;1,2,3,4&quot;;
var arr = [];
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}

}) // 35.8,35.5,30.8,25.2,24.6

log.info(score_act.length.toString())

if(score_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
		AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var score_exp = score_act.slice().sort(sortNumber);
	log.info(score_exp); // Descending sort
	log.info(score_act); // Actual Sort value
	var compare_status = arraysEqual(score_exp, score_act);
	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Offers Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetOffersScoreDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/offers?skip=0&amp;limit=5&amp;sort=scoreDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..consultant.matchResult.score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..consultant.matchResult.score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score DESC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];

if(obj.data[i] == null){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
    if(obj.data[i].status == &apos;open&apos;){
    	aar1.push(obj.data[i].consultant.matchResult.score);
    }else{ 	
    	aar2.push(obj.data[i].consultant.matchResult.score);	
    }
 i++
}

var score_string = vars.get(&quot;score_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}	
}

//var score_string = vars.get(&quot;score&quot;); //[35.8,35.5,30.8,25.2,24.6]
//var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
//	if(!isNaN(item)){
//		    return parseFloat(item);
//		}
//}) 
//
//var aar1_exp = aar1.slice().sort(sortNumber).reverse();
//var aar2_exp = aar2.slice().sort(sortNumber).reverse();
//score_exp = aar1_exp.concat(aar2_exp);
//log.info(score_exp); // Expected sorted array
//log.info(score_act); // Actual Sort value
//var compare_status = arraysEqual(score_exp, score_act);	
//log.info(compare_status);
//
//if(compare_status == false){
//    AssertionResult.setFailure(true);
//    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
//}


</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get OffersScoreASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/offers?skip=0&amp;limit=5&amp;sort=scoreAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..consultant.matchResult.score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..consultant.matchResult.score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score ASC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];

if(obj.data[i] == null){
	log.info(&apos;No data Found&apos;);
				AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
    if(obj.data[i].status == &apos;open&apos;){
    	aar1.push(obj.data[i].consultant.matchResult.score);
    }else{ 	
    	aar2.push(obj.data[i].consultant.matchResult.score);	
    }
 i++
}

var score_string = vars.get(&quot;score_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber);
var aar2_exp = aar2.slice().sort(sortNumber);
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
	
}




</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetOffersPayRate DESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/offers?skip=0&amp;limit=5&amp;sort=consultingRateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">This has defect - 12/8/2017</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..consultant.hourlyRate.min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..consultant.hourlyRate.min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on hourlyPayRateDesc" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var payRate_exp = [];

if(obj.data[i] == null){
	log.info(&apos;No data Found&apos;);
				AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){

    if(obj.data[i].status == &apos;open&apos;){
    	aar1.push(obj.data[i].consultant.hourlyRate.min);
    }else{ 	
    	aar2.push(obj.data[i].consultant.hourlyRate.min);	
    }
 i++
}	

var minRate_string = vars.get(&quot;minRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var payRate_act = minRate_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
payRate_exp = aar1_exp.concat(aar2_exp);
log.info(&quot;Expected Result &quot;+ payRate_exp); // Expected sorted array
log.info(&quot;Actual Result &quot;+ payRate_act); // Actual Sort value
var compare_status = arraysEqual(payRate_exp, payRate_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;PayRate Sorting is incorrect&quot;);
}
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetOffersPayRate ASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/offers?skip=0&amp;limit=5&amp;sort=consultingRateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">This has defect - 12/8/2017</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..consultant.hourlyRate.min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..consultant.hourlyRate.min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on hourlyPayRateASC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var payRate_exp = [];

if(obj.data[i] == null){
	log.info(&apos;No data Found&apos;);
				AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){

    if(obj.data[i].status == &apos;open&apos;){
    	aar1.push(obj.data[i].consultant.hourlyRate.min);
    }else{ 	
    	aar2.push(obj.data[i].consultant.hourlyRate.min);	
    }
 i++
}

var minRate_string = vars.get(&quot;minRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var payRate_act = minRate_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber);
var aar2_exp = aar2.slice().sort(sortNumber);
payRate_exp = aar1_exp.concat(aar2_exp);
log.info(&quot;Expected Result &quot;+ payRate_exp); // Expected sorted array
log.info(&quot;Actual Result &quot;+ payRate_act); // Actual Sort value
var compare_status = arraysEqual(payRate_exp, payRate_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;PayRate Sorting is incorrect&quot;);
}	
}



</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SavedSearches Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetSearchedFilter DateDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters?skip=0&amp;limit=5&amp;sort=dateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">updatedAt</stringProp>
                  <stringProp name="JSONPATH">$..updatedAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">updatedAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..updatedAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;updatedAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
				AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetSearchedFilter DateASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters?skip=0&amp;limit=5&amp;sort=dateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">updatedAt</stringProp>
                  <stringProp name="JSONPATH">$..updatedAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">updatedAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..updatedAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;updatedAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
				AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetSearchedFilter TitleASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters?skip=0&amp;limit=5&amp;sort=titleAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">title</stringProp>
                  <stringProp name="JSONPATH">$..title</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">title</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..title</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on TitleASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortRevString(a,b) {
 
    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &gt; b) //sort string ascending
        return -1 
    if (a &lt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

function sortString(a,b) {

    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &lt; b) //sort string ascending
        return -1 
    if (a &gt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

log.info(vars.get(&quot;title_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6

var title_string = vars.get(&quot;title_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

var title_act = title_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&quot;,&quot;)

var title_actual = [];
for (var i = 0; i &lt; title_act.length; i++) {
    title_actual.push(title_act[i].toLowerCase());
}

if(title_actual.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
					AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var title_exp = title_actual.slice().sort(sortString);
	log.info(title_exp); // Ascending sort
	log.info(title_actual); // Actual Sort value

var compare_status = title_exp.length == title_actual.length &amp;&amp; title_exp.every(function(element, index) {
    return element === title_actual[index]; 
});

log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Ascending Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetSearchedFilter TitleDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters?skip=0&amp;limit=5&amp;sort=titleDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">title</stringProp>
                  <stringProp name="JSONPATH">$..title</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">title</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..title</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on TitleDESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortRevString(a,b) {
 
    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &gt; b) //sort string ascending
        return -1 
    if (a &lt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

function sortString(a,b) {

    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &lt; b) //sort string ascending
        return -1 
    if (a &gt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

log.info(vars.get(&quot;title_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6

var title_string = vars.get(&quot;title_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

var title_act = title_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&quot;,&quot;)

var title_actual = [];
for (var i = 0; i &lt; title_act.length; i++) {
    title_actual.push(title_act[i].toLowerCase());
}

if(title_actual.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
					AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var title_exp = title_actual.slice().sort(sortRevString);
	log.info(title_exp); // Ascending sort
	log.info(title_actual); // Actual Sort value

var compare_status = title_exp.length == title_actual.length &amp;&amp; title_exp.every(function(element, index) {
    return element === title_actual[index]; 
});

log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Ascending Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Archived Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get Archived dateDesc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs/archived?skip=0&amp;limit=5&amp;sort=dateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">closedAt</stringProp>
                  <stringProp name="JSONPATH">$..closedAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">closedAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..closedAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;closedAt_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;closedAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
						AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Date Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get Archived dateAsc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs/archived?skip=0&amp;limit=5&amp;sort=dateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">closedAt</stringProp>
                  <stringProp name="JSONPATH">$..closedAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">closedAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..closedAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;closedAt_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;closedAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
						AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Date Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get ArchivedTitleASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs/archived?skip=0&amp;limit=5&amp;sort=titleAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">title</stringProp>
                  <stringProp name="JSONPATH">$..title</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">title</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..title</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Title ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortRevString(a,b) {
 
    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &gt; b) //sort string ascending
        return -1 
    if (a &lt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

function sortString(a,b) {

    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &lt; b) //sort string ascending
        return -1 
    if (a &gt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}


log.info(vars.get(&quot;title_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6

var title_string = vars.get(&quot;title_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

var title_act = title_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&quot;,&quot;)

var title_actual = [];
for (var i = 0; i &lt; title_act.length; i++) {
    title_actual.push(title_act[i].toLowerCase());
}

if(title_actual.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var title_exp = title_actual.slice().sort(sortString);
	log.info(title_exp); // Ascending sort
	log.info(title_actual); // Actual Sort value

var compare_status = title_exp.length == title_actual.length &amp;&amp; title_exp.every(function(element, index) {
    return element === title_actual[index]; 
});

log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Ascending Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - Get ArchivedTitleDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/jobs/archived?skip=0&amp;limit=5&amp;sort=titleDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">title</stringProp>
                  <stringProp name="JSONPATH">$..title</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">title</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..title</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Title DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortRevString(a,b) {
 
    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &gt; b) //sort string ascending
        return -1 
    if (a &lt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

function sortString(a,b) {

    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &lt; b) //sort string ascending
        return -1 
    if (a &gt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

log.info(vars.get(&quot;title_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6

var title_string = vars.get(&quot;title_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

var title_act = title_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&quot;,&quot;)

var title_actual = [];
for (var i = 0; i &lt; title_act.length; i++) {
    title_actual.push(title_act[i].toLowerCase());
}

if(title_actual.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var title_exp = title_actual.slice().sort(sortRevString);
	log.info(title_exp); // Ascending sort
	log.info(title_actual); // Actual Sort value

var compare_status = title_exp.length == title_actual.length &amp;&amp; title_exp.every(function(element, index) {
    return element === title_actual[index]; 
});

log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Descending Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Hired-Current Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetCurrentJob DateDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/hired?type=current&amp;skip=0&amp;limit=5&amp;sort=dateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Currently This has defect in application</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">endDate</stringProp>
                  <stringProp name="JSONPATH">$..endDate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;endDate&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetCurrentJob DateASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/hired?type=current&amp;skip=0&amp;limit=5&amp;sort=dateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Currently This has defect in application</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="true">
                  <stringProp name="VAR">endDate</stringProp>
                  <stringProp name="JSONPATH">$..endDate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;endDate&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetCurrentJob hourlyPayRateDesc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/hired?type=current&amp;skip=0&amp;limit=5&amp;sort=hourlyPayRateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">hourlyPayRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;hourlyPayRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
							AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetCurrentJob hourlyPayRateAsc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/hired?type=current&amp;skip=0&amp;limit=5&amp;sort=hourlyPayRateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">hourlyPayRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;hourlyPayRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
							AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Hired-UpcomingTab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetUpcomingJob DateDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/hired?type=upcoming&amp;skip=0&amp;limit=5&amp;sort=dateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">startDate</stringProp>
                  <stringProp name="JSONPATH">$..startDate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">startDate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..startDate</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;startDate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
								AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetUpcomingJob DateASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/hired?type=upcoming&amp;skip=0&amp;limit=5&amp;sort=dateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">startDate</stringProp>
                  <stringProp name="JSONPATH">$..startDate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">startDate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..startDate</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;startDate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
								AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetUpcomingJob hourlyPayRateDesc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/hired?type=upcoming&amp;skip=0&amp;limit=5&amp;sort=hourlyPayRateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">hourlyPayRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;hourlyPayRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
								AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetUpcomingJob hourlyPayRateAsc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/hired?type=upcoming&amp;skip=0&amp;limit=5&amp;sort=hourlyPayRateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">hourlyPayRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;hourlyPayRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
								AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Hired-PastTab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetPastJob DateDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/hired?type=past&amp;skip=0&amp;limit=5&amp;sort=dateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">closedAt</stringProp>
                  <stringProp name="JSONPATH">$..closedAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">closedAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..closedAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;closedAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
									AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetPastJob DateASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/hired?type=past&amp;skip=0&amp;limit=5&amp;sort=dateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">closedAt</stringProp>
                  <stringProp name="JSONPATH">$..closedAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">closedAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..closedAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;closedAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
									AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetPastJob nameAsc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/hired?type=past&amp;skip=0&amp;limit=5&amp;sort=nameAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">consultantName</stringProp>
                  <stringProp name="JSONPATH">$..consultantName</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">consultantName</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..consultantName</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on TitleASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortRevString(a,b) {
 
    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &gt; b) //sort string ascending
        return -1 
    if (a &lt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

function sortString(a,b) {

    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &lt; b) //sort string ascending
        return -1 
    if (a &gt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

log.info(vars.get(&quot;consultantName_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6

var title_string = vars.get(&quot;consultantName_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

var title_act = title_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&quot;,&quot;)

var title_actual = [];
for (var i = 0; i &lt; title_act.length; i++) {
    title_actual.push(title_act[i].toLowerCase());
}

if(title_actual.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var title_exp = title_actual.slice().sort(sortString);
	log.info(title_exp); // Ascending sort
	log.info(title_actual); // Actual Sort value

var compare_status = title_exp.length == title_actual.length &amp;&amp; title_exp.every(function(element, index) {
    return element === title_actual[index]; 
});

log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Ascending Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetPastJob nameDesc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/hired?type=past&amp;skip=0&amp;limit=5&amp;sort=nameDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">consultantName</stringProp>
                  <stringProp name="JSONPATH">$..consultantName</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">consultantName</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..consultantName</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on TitleDESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortRevString(a,b) {
 
    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &gt; b) //sort string ascending
        return -1 
    if (a &lt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

function sortString(a,b) {

    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &lt; b) //sort string ascending
        return -1 
    if (a &gt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

log.info(vars.get(&quot;consultantName_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6

var title_string = vars.get(&quot;consultantName_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

var title_act = title_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&quot;,&quot;)

var title_actual = [];
for (var i = 0; i &lt; title_act.length; i++) {
    title_actual.push(title_act[i].toLowerCase());
}

if(title_actual.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var title_exp = title_actual.slice().sort(sortRevString);
	log.info(title_exp); // Ascending sort
	log.info(title_actual); // Actual Sort value

var compare_status = title_exp.length == title_actual.length &amp;&amp; title_exp.every(function(element, index) {
    return element === title_actual[index]; 
});

log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Ascending Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GrowTab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetReviewReceived DateDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/reviews?type=received&amp;skip=0&amp;limit=100&amp;sort=dateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">createdAt</stringProp>
                  <stringProp name="JSONPATH">$..createdAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];

if(obj.data[i] == null){
	log.info(&apos;No data Found&apos;);
	AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
    if(obj.data[i].isViewed == false){
    	aar1.push(obj.data[i].createdAt);
    }else{ 	
    	aar2.push(obj.data[i].createdAt);	
    }
 i++
}	
}

var score_string = vars.get(&quot;createdAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}


</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetReviewReceived DateASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/reviews?type=received&amp;skip=0&amp;limit=100&amp;sort=dateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">createdAt</stringProp>
                  <stringProp name="JSONPATH">$..createdAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];

if(obj.data[i] == null){
	log.info(&apos;No data Found&apos;);
	AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
    if(obj.data[i].isViewed == false){
    	aar1.push(obj.data[i].createdAt);
    }else{ 	
    	aar2.push(obj.data[i].createdAt);	
    }
 i++
}	
}

var score_string = vars.get(&quot;createdAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber);
var aar2_exp = aar2.slice().sort(sortNumber);
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}


</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetReviewGiven DateDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/reviews?type=given&amp;skip=0&amp;limit=50&amp;sort=dateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">createdAt</stringProp>
                  <stringProp name="JSONPATH">$..createdAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var score_act2 = [];
var title_actual = [];

if(obj.data[i] == null){
	log.info(&apos;No data Found&apos;);
		AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
    if(obj.data[i].isReviewed == false){
    	aar1.push(obj.data[i].closedAt);
    }else{ 	
    	aar2.push(obj.data[i].createdAt);	
    }
 i++
}	
}

var score_string = vars.get(&quot;createdAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

score_act2 = aar1.concat(score_act); // here we are concatenating to arrays with actual data for comparing result set

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act2); // Actual Sort value

var compare_status = arraysEqual(score_exp, score_act2);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Date Sorting is incorrect&quot;);
}


</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="EMP - GetReviewGiven DateASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/reviews?type=given&amp;skip=0&amp;limit=50&amp;sort=dateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">createdAt</stringProp>
                  <stringProp name="JSONPATH">$..createdAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var score_act2 = [];
var title_actual = [];

if(obj.data[i] == null){
	log.info(&apos;No data Found&apos;);
		AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
    if(obj.data[i].isReviewed == false){
    	aar1.push(obj.data[i].closedAt);
    }else{ 	
    	aar2.push(obj.data[i].createdAt);	
    }
 i++
}	
}

var score_string = vars.get(&quot;createdAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

//var score_string = aar2
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

score_act2 = aar1.concat(score_act); // here we are concatenating to arrays with actual data for comparing result set

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber);
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act2); // Actual Sort value

var compare_status = arraysEqual(score_exp, score_act2);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Date Sorting is incorrect&quot;);
}


</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Consultant" enabled="true"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Matches Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Match Score DESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/match?skip=0&amp;limit=5&amp;sort=scoreDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score DESC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];
var current_date = vars.get(&quot;current_date&quot;);
var d = new Date(parseFloat(current_date));
var current_date_epoch = d.getTime();

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
	var updated_date_epoch = obj.data[i].updatedAt;
    if(date_diff(current_date_epoch, updated_date_epoch) &lt;= 5){
    	aar1.push(obj.data[i].matchResult.score);
    }else{ 	
    	aar2.push(obj.data[i].matchResult.score);	
    }
 i++
}

var score_string = vars.get(&quot;score_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
	
}




</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Match Score ASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/match?skip=0&amp;limit=5&amp;sort=scoreAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];
var current_date = vars.get(&quot;current_date&quot;);
var d = new Date(parseFloat(current_date));
var current_date_epoch = d.getTime();

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
	var updated_date_epoch = obj.data[i].updatedAt;
    if(date_diff(current_date_epoch, updated_date_epoch) &lt;= 5){
    	aar1.push(obj.data[i].matchResult.score);
    }else{ 	
    	aar2.push(obj.data[i].matchResult.score);	
    }
 i++
}
var score_string = vars.get(&quot;score_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber);
var aar2_exp = aar2.slice().sort(sortNumber);
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}	
}

</stringProp>
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Match hourlyPayRateDesc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/match?skip=0&amp;limit=5&amp;sort=hourlyPayRateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate.min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate.min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on hourlyPayRateDesc" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var payRate_exp = [];
var current_date = vars.get(&quot;current_date&quot;);
var d = new Date(parseFloat(current_date));
var current_date_epoch = d.getTime();

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
	var updated_date_epoch = obj.data[i].updatedAt;
    if(date_diff(current_date_epoch, updated_date_epoch) &lt;= 5){
    	aar1.push(obj.data[i].hourlyPayRate.min);
    }else{ 	
    	aar2.push(obj.data[i].hourlyPayRate.min);	
    }
 i++
}

var minRate_string = vars.get(&quot;minRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var payRate_act = minRate_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
payRate_exp = aar1_exp.concat(aar2_exp);
log.info(&quot;Expected Result &quot;+ payRate_exp); // Expected sorted array
log.info(&quot;Actual Result &quot;+ payRate_act); // Actual Sort value
var compare_status = arraysEqual(payRate_exp, payRate_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;PayRate Sorting is incorrect&quot;);
}	
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Match hourlyPayRateAsc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/match?skip=0&amp;limit=5&amp;sort=hourlyPayRateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate.min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate.min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on hourlyPayRateAsc" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var payRate_exp = [];
var current_date = vars.get(&quot;current_date&quot;);
var d = new Date(parseFloat(current_date));
var current_date_epoch = d.getTime();

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
	var updated_date_epoch = obj.data[i].updatedAt;
    if(date_diff(current_date_epoch, updated_date_epoch) &lt;= 5){
    	aar1.push(obj.data[i].hourlyPayRate.min);
    }else{ 	
    	aar2.push(obj.data[i].hourlyPayRate.min);	
    }
 i++
}
var minRate_string = vars.get(&quot;minRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var payRate_act = minRate_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber);
var aar2_exp = aar2.slice().sort(sortNumber);
payRate_exp = aar1_exp.concat(aar2_exp);
log.info(&quot;Expected Result &quot;+ payRate_exp); // Expected sorted array
log.info(&quot;Actual Result &quot;+ payRate_act); // Actual Sort value
var compare_status = arraysEqual(payRate_exp, payRate_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;PayRate Sorting is incorrect&quot;);
}	
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Invites Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Invites Score DESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/invites?skip=0&amp;limit=5&amp;sort=scoreDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score DESC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];
var current_date = vars.get(&quot;current_date&quot;);
var d = new Date(parseFloat(current_date));
var current_date_epoch = d.getTime();

//log.info(obj.data.length);


if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
	var updated_date_epoch = obj.data[i].updatedAt;
    if(date_diff(current_date_epoch, updated_date_epoch) &lt;= 5){
    	aar1.push(obj.data[i].matchResult.score);
    }else{ 	
    	aar2.push(obj.data[i].matchResult.score);	
    }
 i++
}	

var score_string = vars.get(&quot;score_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Invites Score ASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/invites?skip=0&amp;limit=5&amp;sort=scoreAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];
var current_date = vars.get(&quot;current_date&quot;);
var d = new Date(parseFloat(current_date));
var current_date_epoch = d.getTime();

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
	var updated_date_epoch = obj.data[i].updatedAt;
    if(date_diff(current_date_epoch, updated_date_epoch) &lt;= 5){
    	aar1.push(obj.data[i].matchResult.score);
    }else{ 	
    	aar2.push(obj.data[i].matchResult.score);	
    }
 i++
}	
var score_string = vars.get(&quot;score_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber);
var aar2_exp = aar2.slice().sort(sortNumber);
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}

</stringProp>
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Invites hourlyPayRateDesc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/invites?skip=0&amp;limit=5&amp;sort=hourlyPayRateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate.min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate.min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on hourlyPayRateDesc" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var payRate_exp = [];
var current_date = vars.get(&quot;current_date&quot;);
var d = new Date(parseFloat(current_date));
var current_date_epoch = d.getTime();

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
	var updated_date_epoch = obj.data[i].updatedAt;
    if(date_diff(current_date_epoch, updated_date_epoch) &lt;= 5){
    	aar1.push(obj.data[i].hourlyPayRate.min);
    }else{ 	
    	aar2.push(obj.data[i].hourlyPayRate.min);	
    }
 i++
}	
var minRate_string = vars.get(&quot;minRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var payRate_act = minRate_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
payRate_exp = aar1_exp.concat(aar2_exp);
log.info(&quot;Expected Result &quot;+ payRate_exp); // Expected sorted array
log.info(&quot;Actual Result &quot;+ payRate_act); // Actual Sort value
var compare_status = arraysEqual(payRate_exp, payRate_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;PayRate Sorting is incorrect&quot;);
}
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Invites hourlyPayRateAsc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/invites?skip=0&amp;limit=5&amp;sort=hourlyPayRateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate.min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate.min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on hourlyPayRateAsc" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var payRate_exp = [];
var current_date = vars.get(&quot;current_date&quot;);
var d = new Date(parseFloat(current_date));
var current_date_epoch = d.getTime();

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
	var updated_date_epoch = obj.data[i].updatedAt;
    if(date_diff(current_date_epoch, updated_date_epoch) &lt;= 5){
    	aar1.push(obj.data[i].hourlyPayRate.min);
    }else{ 	
    	aar2.push(obj.data[i].hourlyPayRate.min);	
    }
 i++
}	
var minRate_string = vars.get(&quot;minRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var payRate_act = minRate_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber);
var aar2_exp = aar2.slice().sort(sortNumber);
payRate_exp = aar1_exp.concat(aar2_exp);
log.info(&quot;Expected Result &quot;+ payRate_exp); // Expected sorted array
log.info(&quot;Actual Result &quot;+ payRate_act); // Actual Sort value
var compare_status = arraysEqual(payRate_exp, payRate_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;PayRate Sorting is incorrect&quot;);
}
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Applications Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get All Application Score DESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/applications?skip=0&amp;limit=5&amp;sort=scoreDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score DESC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
    if(obj.data[i].applicationIsDraft == true){
    	aar1.push(obj.data[i].matchResult.score);
    }else{ 	
    	aar2.push(obj.data[i].matchResult.score);	
    }
 i++
}
var score_string = vars.get(&quot;score_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}	
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get All Application Score ASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/applications?skip=0&amp;limit=5&amp;sort=scoreAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){

    if(obj.data[i].applicationIsDraft == true){
    	aar1.push(obj.data[i].matchResult.score);
    }else{ 	
    	aar2.push(obj.data[i].matchResult.score);	
    }
 i++
}	
var score_string = vars.get(&quot;score_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber);
var aar2_exp = aar2.slice().sort(sortNumber);
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}

</stringProp>
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get All Application hourlyPayRateDesc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/applications?skip=0&amp;limit=5&amp;sort=hourlyPayRateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate.min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate.min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on hourlyPayRateDesc" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var payRate_exp = [];

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){

    if(obj.data[i].applicationIsDraft == true){
    	aar1.push(obj.data[i].hourlyPayRate.min);
    }else{ 	
    	aar2.push(obj.data[i].hourlyPayRate.min);	
    }
 i++
}	
var minRate_string = vars.get(&quot;minRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var payRate_act = minRate_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
payRate_exp = aar1_exp.concat(aar2_exp);
log.info(&quot;Expected Result &quot;+ payRate_exp); // Expected sorted array
log.info(&quot;Actual Result &quot;+ payRate_act); // Actual Sort value
var compare_status = arraysEqual(payRate_exp, payRate_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;PayRate Sorting is incorrect&quot;);
}
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get All Application hourlyPayRateAsc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/applications?skip=0&amp;limit=5&amp;sort=hourlyPayRateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate.min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate.min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on hourlyPayRateAsc" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var payRate_exp = [];

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){

    if(obj.data[i].applicationIsDraft == true){
    	aar1.push(obj.data[i].hourlyPayRate.min);
    }else{ 	
    	aar2.push(obj.data[i].hourlyPayRate.min);	
    }
 i++
}	
var minRate_string = vars.get(&quot;minRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var payRate_act = minRate_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber);
var aar2_exp = aar2.slice().sort(sortNumber);
payRate_exp = aar1_exp.concat(aar2_exp);
log.info(&quot;Expected Result &quot;+ payRate_exp); // Expected sorted array
log.info(&quot;Actual Result &quot;+ payRate_act); // Actual Sort value
var compare_status = arraysEqual(payRate_exp, payRate_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;PayRate Sorting is incorrect&quot;);
}
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Offer Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Offers ScoreDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/offers?skip=0&amp;limit=5&amp;sort=scoreDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score DESC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
    if(obj.data[i].offerStatus == &apos;open&apos;){
    	aar1.push(obj.data[i].matchResult.score);
    }else{ 	
    	aar2.push(obj.data[i].matchResult.score);	
    }
 i++
}	
var score_string = vars.get(&quot;score_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Offers ScoreASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/offers?skip=0&amp;limit=5&amp;sort=scoreAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){

    if(obj.data[i].offerStatus == &apos;open&apos;){
    	aar1.push(obj.data[i].matchResult.score);
    }else{ 	
    	aar2.push(obj.data[i].matchResult.score);	
    }
 i++
}	
var score_string = vars.get(&quot;score_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber);
var aar2_exp = aar2.slice().sort(sortNumber);
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}

</stringProp>
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Offers hourlyPayRateDesc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/offers?skip=0&amp;limit=5&amp;sort=hourlyPayRateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate.min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate.min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on hourlyPayRateDesc" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var payRate_exp = [];

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){

    if(obj.data[i].offerStatus == &apos;open&apos;){
    	aar1.push(obj.data[i].hourlyPayRate.min);
    }else{ 	
    	aar2.push(obj.data[i].hourlyPayRate.min);	
    }
 i++
}
var minRate_string = vars.get(&quot;minRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var payRate_act = minRate_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
payRate_exp = aar1_exp.concat(aar2_exp);
log.info(&quot;Expected Result &quot;+ payRate_exp); // Expected sorted array
log.info(&quot;Actual Result &quot;+ payRate_act); // Actual Sort value
var compare_status = arraysEqual(payRate_exp, payRate_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;PayRate Sorting is incorrect&quot;);
}	
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Offers hourlyPayRateAsc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/offers?skip=0&amp;limit=5&amp;sort=hourlyPayRateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate.min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate.min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on hourlyPayRateAsc" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var payRate_exp = [];

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){

    if(obj.data[i].offerStatus == &apos;open&apos;){
    	aar1.push(obj.data[i].hourlyPayRate.min);
    }else{ 	
    	aar2.push(obj.data[i].hourlyPayRate.min);	
    }
 i++
}	

var minRate_string = vars.get(&quot;minRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var payRate_act = minRate_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber);
var aar2_exp = aar2.slice().sort(sortNumber);
payRate_exp = aar1_exp.concat(aar2_exp);
log.info(&quot;Expected Result &quot;+ payRate_exp); // Expected sorted array
log.info(&quot;Actual Result &quot;+ payRate_act); // Actual Sort value
var compare_status = arraysEqual(payRate_exp, payRate_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;PayRate Sorting is incorrect&quot;);
}
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SavedJobs Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Saved Jobs Score DESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/save?skip=0&amp;limit=5&amp;sort=scoreDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}

function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;score_ALL&quot;)); // [52,49.7,46.8,37.33,32.6]

var score_string = vars.get(&quot;score_ALL&quot;); //[52,49.7,46.8,37.33,32.6]

//var a = &quot;1,2,3,4&quot;;
var arr = [];
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}

}) // 35.8,35.5,30.8,25.2,24.6

log.info(score_act.length.toString())

if(score_act.length &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
				AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var score_exp = score_act.slice().sort(sortNumber).reverse();
	log.info(score_exp); // Descending sort
	log.info(score_act); // Actual Sort value
	var compare_status = arraysEqual(score_exp, score_act);
	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Saved Jobs Score ASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/save?skip=0&amp;limit=5&amp;sort=scoreAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">score</stringProp>
                  <stringProp name="JSONPATH">$..score</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">score</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..score</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Score ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}

function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;score_ALL&quot;)); // [52,49.7,46.8,37.33,32.6]

var score_string = vars.get(&quot;score_ALL&quot;); //[52,49.7,46.8,37.33,32.6]

//var a = &quot;1,2,3,4&quot;;
var arr = [];
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}

}) // 35.8,35.5,30.8,25.2,24.6

log.info(score_act.length.toString())

if(score_act.length &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
				AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var score_exp = score_act.slice().sort(sortNumber);
	log.info(score_exp); // Descending sort
	log.info(score_act); // Actual Sort value
	var compare_status = arraysEqual(score_exp, score_act);
	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Saved Jobs PayRate DESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/save?skip=0&amp;limit=5&amp;sort=hourlyPayRateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate.min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate.min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on PayRate DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}

function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;minRate_ALL&quot;)); // [52,49.7,46.8,37.33,32.6]

var score_string = vars.get(&quot;minRate_ALL&quot;); //[52,49.7,46.8,37.33,32.6]

//var a = &quot;1,2,3,4&quot;;
var arr = [];
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}

}) // 35.8,35.5,30.8,25.2,24.6

log.info(score_act.length.toString())

if(score_act.length &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
				AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var score_exp = score_act.slice().sort(sortNumber).reverse();
	log.info(score_exp); // Descending sort
	log.info(score_act); // Actual Sort value
	var compare_status = arraysEqual(score_exp, score_act);
	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - Get Saved Jobs PayRate ASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/jobs/save?skip=0&amp;limit=5&amp;sort=hourlyPayRateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">minRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate.min</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">minRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate.min</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on PayRate ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}

function sortNumber(a,b) {
    return a - b;
}

log.info(vars.get(&quot;minRate_ALL&quot;)); // [52,49.7,46.8,37.33,32.6]

var score_string = vars.get(&quot;minRate_ALL&quot;); //[52,49.7,46.8,37.33,32.6]

//var a = &quot;1,2,3,4&quot;;
var arr = [];
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}

}) // 35.8,35.5,30.8,25.2,24.6

log.info(score_act.length.toString())

if(score_act.length &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
				AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var score_exp = score_act.slice().sort(sortNumber);
	log.info(score_exp); // Descending sort
	log.info(score_act); // Actual Sort value
	var compare_status = arraysEqual(score_exp, score_act);
	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SavedSearches Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetSearchedFilter DateDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters?skip=0&amp;limit=5&amp;sort=dateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">updatedAt</stringProp>
                  <stringProp name="JSONPATH">$..updatedAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">updatedAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..updatedAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;updatedAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
					AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetSearchedFilter DateASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters?skip=0&amp;limit=5&amp;sort=dateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">updatedAt</stringProp>
                  <stringProp name="JSONPATH">$..updatedAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">updatedAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..updatedAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;updatedAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
					AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetSearchedFilter TitleASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters?skip=0&amp;limit=5&amp;sort=titleAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">title</stringProp>
                  <stringProp name="JSONPATH">$..title</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">title</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..title</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on TitleASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortRevString(a,b) {
 
    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &gt; b) //sort string ascending
        return -1 
    if (a &lt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

function sortString(a,b) {

    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &lt; b) //sort string ascending
        return -1 
    if (a &gt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}
log.info(vars.get(&quot;title_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6

var title_string = vars.get(&quot;title_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

var title_act = title_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&quot;,&quot;)

var title_actual = [];
for (var i = 0; i &lt; title_act.length; i++) {
    title_actual.push(title_act[i].toLowerCase());
}

if(title_actual.length &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var title_exp = title_actual.slice().sort(sortString);
	log.info(title_exp); // Ascending sort
	log.info(title_actual); // Actual Sort value

var compare_status = title_exp.length == title_actual.length &amp;&amp; title_exp.every(function(element, index) {
    return element === title_actual[index]; 
});

log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Ascending Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetSearchedFilter TitleDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters?skip=0&amp;limit=5&amp;sort=titleDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">title</stringProp>
                  <stringProp name="JSONPATH">$..title</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">title</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..title</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on TitleDESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortRevString(a,b) {
 
    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &gt; b) //sort string ascending
        return -1 
    if (a &lt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

function sortString(a,b) {

    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &lt; b) //sort string ascending
        return -1 
    if (a &gt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

log.info(vars.get(&quot;title_ALL&quot;)); // 35.8,35.5,30.8,25.2,24.6

var title_string = vars.get(&quot;title_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

var title_act = title_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&quot;,&quot;)

var title_actual = [];
for (var i = 0; i &lt; title_act.length; i++) {
    title_actual.push(title_act[i].toLowerCase());
}

if(title_actual.length &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var title_exp = title_actual.slice().sort(sortRevString);
	log.info(title_exp); // Ascending sort
	log.info(title_actual); // Actual Sort value

var compare_status = title_exp.length == title_actual.length &amp;&amp; title_exp.every(function(element, index) {
    return element === title_actual[index]; 
});

log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Ascending Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Hired-Current Tab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetCurrentJob-ForGettingCount" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=current&amp;skip=0&amp;limit=5&amp;sort=dateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Currently This has defect in application</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">list_count</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.meta.count</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${list_count} &gt;= 1</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetCurrentJob DateDESC" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=current&amp;skip=0&amp;limit=${list_count}&amp;sort=dateDesc</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">Here we are verifying both sorting and ordering</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">48</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">endDate</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$..endDate</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                    <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on EndDate DESC" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar_order1 = [];
var aar_order2 = [];
var aar_comp_order_act = [];
var aar_comp_order_exp = []
var aar2 = [];
var score_exp = [];
var title_actual = [];
var current_date = vars.get(&quot;current_date&quot;);
var d = new Date(parseFloat(current_date));
var current_date_epoch = d.getTime();

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
		
while(obj.data[i]!=null){

	aar_comp_order_act.push(obj.data[i].startDate);	
	
	if(obj.data[i].endDate != null )
	{	
		aar1.push(obj.data[i].endDate);
		aar_order1.push(obj.data[i].startDate);	
	}else{
		aar_order2.push(obj.data[i].startDate);
	}
 i++
}

log.info(aar1.length);

if(aar1.length &gt; 1){

// Here we want to verify ordering
aar_comp_order_exp = aar_order2.concat(aar_order1);

log.info(&quot;Expected Array &quot; + aar_comp_order_exp );
log.info(&quot;Actual Array &quot; + aar_comp_order_act );	

var date_string = vars.get(&quot;endDate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var date_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
log.info(aar1_exp); // Expected sorted array
log.info(date_act); // Actual Sort value
var compare_status = arraysEqual(aar1_exp, date_act);	
log.info(compare_status);

var compare_ordering = arraysEqual(aar_comp_order_exp, aar_comp_order_act);	
log.info(compare_ordering);


if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Date Sorting is incorrect&quot;);
}

if(compare_ordering == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Date Sorting is incorrect&quot;);
}
	
}
else{
	log.info(&quot;Can NOT perform sorting as there is NO end Date in current List&quot;); 
}	
}




</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetCurrentJob DateASC" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                  <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=current&amp;skip=0&amp;limit=${list_count}&amp;sort=dateAsc</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">Here we are verifying both sorting and ordering</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="49586">200</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">true</boolProp>
                    <intProp name="Assertion.test_type">48</intProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                    <stringProp name="VAR">endDate</stringProp>
                    <stringProp name="JSONPATH">$..endDate</stringProp>
                    <stringProp name="DEFAULT"></stringProp>
                    <stringProp name="VARIABLE"></stringProp>
                    <stringProp name="SUBJECT">BODY</stringProp>
                  </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">endDate</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$..endDate</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                    <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                  </JSONPostProcessor>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="false">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;endDate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
						AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;EndDate Sorting is incorrect&quot;);
}
}</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                  <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on EndDate ASC" enabled="true">
                    <stringProp name="scriptLanguage">javascript</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey"></stringProp>
                    <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar_order1 = [];
var aar_order2 = [];
var aar_comp_order_act = [];
var aar_comp_order_exp = []
var aar2 = [];
var score_exp = [];
var title_actual = [];
var current_date = vars.get(&quot;current_date&quot;);
var d = new Date(parseFloat(current_date));
var current_date_epoch = d.getTime();

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
		
while(obj.data[i]!=null){

	aar_comp_order_act.push(obj.data[i].startDate);	
	
	if(obj.data[i].endDate != null )
	{	
		aar1.push(obj.data[i].endDate);
		aar_order1.push(obj.data[i].startDate);	
	}else{
		aar_order2.push(obj.data[i].startDate);
	}
 i++
}

log.info(aar1.length);

if(aar1.length &gt; 1){

// Here we want to verify ordering
aar_comp_order_exp = aar_order1.concat(aar_order2);

log.info(&quot;Expected Array &quot; + aar_comp_order_exp );
log.info(&quot;Actual Array &quot; + aar_comp_order_act );	

var date_string = vars.get(&quot;endDate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var date_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber);
log.info(aar1_exp); // Expected sorted array
log.info(date_act); // Actual Sort value
var compare_status = arraysEqual(aar1_exp, date_act);	
log.info(compare_status);

var compare_ordering = arraysEqual(aar_comp_order_exp, aar_comp_order_act);	
log.info(compare_ordering);


if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Date Sorting is incorrect&quot;);
}

if(compare_ordering == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Date Sorting is incorrect&quot;);
}
	
}
else{
	log.info(&quot;Can NOT perform sorting as there is NO end Date in current List&quot;); 
}	
}




</stringProp>
                  </JSR223Assertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetCurrentJob hourlyPayRateDesc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=current&amp;skip=0&amp;limit=5&amp;sort=hourlyPayRateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">hourlyPayRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;hourlyPayRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
						AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetCurrentJob hourlyPayRateAsc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=current&amp;skip=0&amp;limit=5&amp;sort=hourlyPayRateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">hourlyPayRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;hourlyPayRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
						AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Hired-UpcomingTab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetUpcomingJob DateDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=upcoming&amp;skip=0&amp;limit=5&amp;sort=dateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">endDate</stringProp>
                  <stringProp name="JSONPATH">$..endDate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">startDate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..startDate</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;startDate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
							AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetUpcomingJob DateASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=upcoming&amp;skip=0&amp;limit=5&amp;sort=dateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">endDate</stringProp>
                  <stringProp name="JSONPATH">$..endDate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">startDate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..startDate</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;startDate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
							AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetUpcomingJob hourlyPayRateDesc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=upcoming&amp;skip=0&amp;limit=5&amp;sort=hourlyPayRateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">hourlyPayRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;hourlyPayRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
							AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetUpcomingJob hourlyPayRateAsc" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=upcoming&amp;skip=0&amp;limit=5&amp;sort=hourlyPayRateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">hourlyPayRate</stringProp>
                  <stringProp name="JSONPATH">$..hourlyPayRate</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..hourlyPayRate</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;hourlyPayRate_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
							AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Hired-PastTab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetPastJob DateDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=past&amp;skip=0&amp;limit=5&amp;sort=dateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">closedAt</stringProp>
                  <stringProp name="JSONPATH">$..closedAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">closedAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..closedAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;closedAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
								AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber).reverse();
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetPastJob DateASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=past&amp;skip=0&amp;limit=5&amp;sort=dateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">closedAt</stringProp>
                  <stringProp name="JSONPATH">$..closedAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">closedAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..closedAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortNumber(a,b) {
    return a - b;
}

//log.info(vars.get(&quot;updatedAt&quot;)); // 35.8,35.5,30.8,25.2,24.6
var date_string = vars.get(&quot;closedAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var strtDate_act = date_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseInt(item);
		}
})
//log.info(strtDate_act.toString());
if(strtDate_act.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
								AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var strtDate_exp = strtDate_act.slice().sort(sortNumber);
	log.info(strtDate_exp); // Ascending sort
	log.info(strtDate_act); // Actual Sort value
	var compare_status = strtDate_exp.length == strtDate_act.length &amp;&amp; strtDate_exp.every(function(element, index) {
    return element === strtDate_act[index]; 
});
log.info(compare_status);
if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetPastJob TitleASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=past&amp;skip=0&amp;limit=5&amp;sort=titleAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">jobTitle</stringProp>
                  <stringProp name="JSONPATH">$..jobTitle</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">jobTitle</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..jobTitle</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on TitleASC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortRevString(a,b) {
 
    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &gt; b) //sort string ascending
        return -1 
    if (a &lt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

function sortString(a,b) {

    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &lt; b) //sort string ascending
        return -1 
    if (a &gt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}
var title_string = vars.get(&quot;jobTitle_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

var title_act = title_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&quot;,&quot;)

var title_actual = [];
for (var i = 0; i &lt; title_act.length; i++) {
    title_actual.push(title_act[i].toLowerCase());
}

if(title_actual.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var title_exp = title_actual.slice().sort(sortString);
	log.info(title_exp); // Ascending sort
	log.info(title_actual); // Actual Sort value

var compare_status = title_exp.length == title_actual.length &amp;&amp; title_exp.every(function(element, index) {
    return element === title_actual[index]; 
});

log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Ascending Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetPastJob TitleDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/hired?type=past&amp;skip=0&amp;limit=5&amp;sort=titleDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">jobTitle</stringProp>
                  <stringProp name="JSONPATH">$..jobTitle</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">jobTitle</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..jobTitle</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on TitleDESC" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function sortRevString(a,b) {
 
    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &gt; b) //sort string ascending
        return -1 
    if (a &lt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

function sortString(a,b) {

    //var nameA=a.name.toLowerCase(), nameB=b.name.toLowerCase()
    if (a &lt; b) //sort string ascending
        return -1 
    if (a &gt; b)
        return 1
    return 0 //default return value (no sorting)
    //return b - a;
}

var title_string = vars.get(&quot;jobTitle_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

var title_act = title_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&quot;,&quot;)

var title_actual = [];
for (var i = 0; i &lt; title_act.length; i++) {
    title_actual.push(title_act[i].toLowerCase());
}

if(title_actual.length.toString() &lt;= 1){
	log.info(&quot;Can NOT perform sorting on one record&quot;);
	AssertionResult.setFailure(true);
	AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{
	var title_exp = title_actual.slice().sort(sortRevString);
	log.info(title_exp); // Ascending sort
	log.info(title_actual); // Actual Sort value

var compare_status = title_exp.length == title_actual.length &amp;&amp; title_exp.every(function(element, index) {
    return element === title_actual[index]; 
});

log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Title Ascending Sorting is incorrect&quot;);
}
}</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GrowTab" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetReviewReceived DateDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/reviews?type=received&amp;skip=0&amp;limit=100&amp;sort=dateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">createdAt</stringProp>
                  <stringProp name="JSONPATH">$..createdAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
    if(obj.data[i].isViewed == false){
    	aar1.push(obj.data[i].createdAt);
    }else{ 	
    	aar2.push(obj.data[i].createdAt);	
    }
 i++
}	
var score_string = vars.get(&quot;createdAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetReviewReceived DateASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/reviews?type=received&amp;skip=0&amp;limit=100&amp;sort=dateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">createdAt</stringProp>
                  <stringProp name="JSONPATH">$..createdAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var title_actual = [];

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
    if(obj.data[i].isViewed == false){
    	aar1.push(obj.data[i].createdAt);
    }else{ 	
    	aar2.push(obj.data[i].createdAt);	
    }
 i++
}	
var score_string = vars.get(&quot;createdAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

var aar1_exp = aar1.slice().sort(sortNumber);
var aar2_exp = aar2.slice().sort(sortNumber);
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act); // Actual Sort value
var compare_status = arraysEqual(score_exp, score_act);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Score Sorting is incorrect&quot;);
}
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetReviewGiven DateDESC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/reviews?type=given&amp;skip=0&amp;limit=50&amp;sort=dateDesc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">createdAt</stringProp>
                  <stringProp name="JSONPATH">$..createdAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date DESC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var score_act2 = [];
var title_actual = [];

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
    if(obj.data[i].isReviewed == false){
    	aar1.push(obj.data[i].closedAt);
    }else{ 	
    	aar2.push(obj.data[i].createdAt);	
    }
 i++
}	
var score_string = vars.get(&quot;createdAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

score_act2 = aar1.concat(score_act); // here we are concatenating to arrays with actual data for comparing result set

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber).reverse();
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act2); // Actual Sort value

var compare_status = arraysEqual(score_exp, score_act2);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Date Sorting is incorrect&quot;);
}
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CONS - GetReviewGiven DateASC" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants/reviews?type=given&amp;skip=0&amp;limit=50&amp;sort=dateAsc</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49586">200</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
                <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="jp@gc - JSON Path Extractor" enabled="false">
                  <stringProp name="VAR">createdAt</stringProp>
                  <stringProp name="JSONPATH">$..createdAt</stringProp>
                  <stringProp name="DEFAULT"></stringProp>
                  <stringProp name="VARIABLE"></stringProp>
                  <stringProp name="SUBJECT">BODY</stringProp>
                </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$..createdAt</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
                  <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Sorting on Date ASC" enabled="true">
                  <stringProp name="TestPlan.comments">This is double sorting</stringProp>
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey"></stringProp>
                  <stringProp name="script">function date_diff(date_1, date_2){
	var ONE_DAY = 1000 * 60 * 60 * 24;
	var difference_ms = Math.abs(date_1 - date_2);
	var date_difference = Math.round(difference_ms/ONE_DAY);
	return date_difference;
}
function sortNumber(a,b) {
    return a - b;
}

function arraysEqual(arr1, arr2) {
    if(arr1.length !== arr2.length)
        return false;
    for(var i = arr1.length; i--;) {
        if(arr1[i] !== arr2[i])
            return false;
    }
    return true;
}
var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
var i = 0;
var x = 0;
var abc = 0;
var aar1 = [];
var aar2 = [];
var score_exp = [];
var score_act2 = [];
var title_actual = [];

if(obj.data.length &lt;=1){
	log.info(&apos;No data Found&apos;);
			AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Can NOT perform sorting on one record OR NO Record Found&quot;);
}
else{	
while(obj.data[i]!=null){
	
    if(obj.data[i].isReviewed == false){
    	aar1.push(obj.data[i].closedAt);
    }else{ 	
    	aar2.push(obj.data[i].createdAt);	
    }
 i++
}
var score_string = vars.get(&quot;createdAt_ALL&quot;); //[35.8,35.5,30.8,25.2,24.6]

//var score_string = aar2
var score_act = score_string.replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;).split(&apos;,&apos;).map(function(item) {
	if(!isNaN(item)){
		    return parseFloat(item);
		}
}) 

score_act2 = aar1.concat(score_act); // here we are concatenating to arrays with actual data for comparing result set

var aar1_exp = aar1.slice().sort(sortNumber).reverse();
var aar2_exp = aar2.slice().sort(sortNumber);
score_exp = aar1_exp.concat(aar2_exp);
log.info(score_exp); // Expected sorted array
log.info(score_act2); // Actual Sort value

var compare_status = arraysEqual(score_exp, score_act2);	
log.info(compare_status);

if(compare_status == false){
    AssertionResult.setFailure(true);
    AssertionResult.setFailureMessage(&quot;Date Sorting is incorrect&quot;);
}	
}

</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SearchFilter" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSkillsofCategories" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/public/categories/skills</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">This is Finalized Call where all Ids are extracted</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_accounting" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_accounting</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_marketing" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_marketing</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_SoftwareDev" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_SoftwareDev</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_design" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_design</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_IT" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_IT</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_writing" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">AOE_writing</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Accounting_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill0;Skill1;Skill2;Skill3;Skill4;Skill5;Skill6;Skill7</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos;)].skills[0].id;$..[?(@.name == &apos;Accounting&apos;)].skills[1].id;$..[?(@.name == &apos;Accounting&apos;)].skills[2].id;$..[?(@.name == &apos;Accounting&apos;)].skills[3].id;$..[?(@.name == &apos;Accounting&apos;)].skills[4].id;$..[?(@.name == &apos;Accounting&apos;)].skills[5].id;$..[?(@.name == &apos;Accounting&apos;)].skills[6].id;$..[?(@.name == &apos;Accounting&apos;)].skills[7].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Marketing_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill8;Skill9;Skill10;Skill11;Skill12;Skill13;Skill14;Skill15;Skill16;Skill17;Skill18;Skill19;Skill20;Skill21;Skill22;Skill23</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos;)].skills[0].id;$..[?(@.name == &apos;Marketing&apos;)].skills[1].id;$..[?(@.name == &apos;Marketing&apos;)].skills[2].id;$..[?(@.name == &apos;Marketing&apos;)].skills[3].id;$..[?(@.name == &apos;Marketing&apos;)].skills[4].id;$..[?(@.name == &apos;Marketing&apos;)].skills[5].id;$..[?(@.name == &apos;Marketing&apos;)].skills[6].id;$..[?(@.name == &apos;Marketing&apos;)].skills[7].id;$..[?(@.name == &apos;Marketing&apos;)].skills[8].id;$..[?(@.name == &apos;Marketing&apos;)].skills[9].id;$..[?(@.name == &apos;Marketing&apos;)].skills[10].id;$..[?(@.name == &apos;Marketing&apos;)].skills[11].id;$..[?(@.name == &apos;Marketing&apos;)].skills[12].id;$..[?(@.name == &apos;Marketing&apos;)].skills[13].id;$..[?(@.name == &apos;Marketing&apos;)].skills[14].id;$..[?(@.name == &apos;Marketing&apos;)].skills[15].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Software Development_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill24;Skill25;Skill26;Skill27;Skill28;Skill29;Skill30;Skill31;Skill32;Skill33;Skill34;Skill35;Skill36;Skill37;Skill38</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos;)].skills[0].id;$..[?(@.name == &apos;Software Development&apos;)].skills[1].id;$..[?(@.name == &apos;Software Development&apos;)].skills[2].id;$..[?(@.name == &apos;Software Development&apos;)].skills[3].id;$..[?(@.name == &apos;Software Development&apos;)].skills[4].id;$..[?(@.name == &apos;Software Development&apos;)].skills[5].id;$..[?(@.name == &apos;Software Development&apos;)].skills[6].id;$..[?(@.name == &apos;Software Development&apos;)].skills[7].id;$..[?(@.name == &apos;Software Development&apos;)].skills[8].id;$..[?(@.name == &apos;Software Development&apos;)].skills[9].id;$..[?(@.name == &apos;Software Development&apos;)].skills[10].id;$..[?(@.name == &apos;Software Development&apos;)].skills[11].id;$..[?(@.name == &apos;Software Development&apos;)].skills[12].id;$..[?(@.name == &apos;Software Development&apos;)].skills[13].id;$..[?(@.name == &apos;Software Development&apos;)].skills[14].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Design_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill39;Skill40;Skill41;Skill42;Skill43;Skill44;Skill45;Skill46;Skill47;Skill48;Skill49;Skill50;Skill51;Skill52;Skill53;Skill54;Skill55;Skill56</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos;)].skills[0].id;$..[?(@.name == &apos;Design&apos;)].skills[1].id;$..[?(@.name == &apos;Design&apos;)].skills[2].id;$..[?(@.name == &apos;Design&apos;)].skills[3].id;$..[?(@.name == &apos;Design&apos;)].skills[4].id;$..[?(@.name == &apos;Design&apos;)].skills[5].id;$..[?(@.name == &apos;Design&apos;)].skills[6].id;$..[?(@.name == &apos;Design&apos;)].skills[7].id;$..[?(@.name == &apos;Design&apos;)].skills[8].id;$..[?(@.name == &apos;Design&apos;)].skills[9].id;$..[?(@.name == &apos;Design&apos;)].skills[10].id;$..[?(@.name == &apos;Design&apos;)].skills[11].id;$..[?(@.name == &apos;Design&apos;)].skills[12].id;$..[?(@.name == &apos;Design&apos;)].skills[13].id;$..[?(@.name == &apos;Design&apos;)].skills[14].id;$..[?(@.name == &apos;Design&apos;)].skills[15].id;$..[?(@.name == &apos;Design&apos;)].skills[16].id;$..[?(@.name == &apos;Design&apos;)].skills[17].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="IT services_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill57;Skill58;Skill59;Skill60;Skill61</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos;)].skills[0].id;$..[?(@.name == &apos;IT Services&apos;)].skills[1].id;$..[?(@.name == &apos;IT Services&apos;)].skills[2].id;$..[?(@.name == &apos;IT Services&apos;)].skills[3].id;$..[?(@.name == &apos;IT Services&apos;)].skills[4].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Writing &amp; Editing_Skills" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Skill62;Skill63;Skill64;Skill65;Skill66;Skill67;Skill68;Skill69;Skill70</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[0].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[1].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[2].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[3].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[4].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[5].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[6].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[7].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[8].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Artifact - Tech Url" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">------WebKitFormBoundaryHlhLhG2WOFptFgnJ&#xd;
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;Tulips.jpg&quot;&#xd;
Content-Type: image/jpeg&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryHlhLhG2WOFptFgnJ&#xd;
Content-Disposition: form-data; name=&quot;type&quot;&#xd;
&#xd;
artifact&#xd;
------WebKitFormBoundaryHlhLhG2WOFptFgnJ--</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/files</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryHlhLhG2WOFptFgnJ</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">TechURL</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.url</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;firstName&quot;: &quot;Richard&quot;,&#xd;
	&quot;lastName&quot;: &quot;Branson&quot;,&#xd;
	&quot;address&quot;: &quot;House No. ABC  Street 17 Gulberg Lahore&quot;,&#xd;
	&quot;commuteRadius&quot;: 29,&#xd;
	&quot;workingHours&quot;: 29,&#xd;
	&quot;title&quot;: &quot;Accounts Officer&quot;,&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 1,&#xd;
		&quot;rank&quot;: 1,&#xd;
		&quot;proficiency&quot;: &quot;expert&quot;&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 2,&#xd;
		&quot;rank&quot;: 2,&#xd;
		&quot;proficiency&quot;: &quot;advanced&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;id&quot;: &quot;${Skill8}&quot;,&#xd;
		&quot;experience&quot;: 1,&#xd;
		&quot;rank&quot;: 3,&#xd;
		&quot;proficiency&quot;: &quot;expert&quot;&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill9}&quot;,&#xd;
		&quot;experience&quot;: 2,&#xd;
		&quot;rank&quot;: 4,&#xd;
		&quot;proficiency&quot;: &quot;advanced&quot;&#xd;
	},&#xd;
	{&#xd;
		&quot;id&quot;: &quot;${Skill24}&quot;,&#xd;
		&quot;experience&quot;: 1,&#xd;
		&quot;rank&quot;: 5,&#xd;
		&quot;proficiency&quot;: &quot;expert&quot;&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill25}&quot;,&#xd;
		&quot;experience&quot;: 2,&#xd;
		&quot;rank&quot;: 6,&#xd;
		&quot;proficiency&quot;: &quot;advanced&quot;&#xd;
	}],&#xd;
	&quot;hourlyRate&quot;: {&#xd;
		&quot;min&quot;: 75,&#xd;
		&quot;max&quot;: 100&#xd;
	},&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;experience&quot;: 3&#xd;
	},&#xd;
	{&#xd;
		&quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
		&quot;experience&quot;: 3&#xd;
	},&#xd;
	{&#xd;
		&quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
		&quot;experience&quot;: 3&#xd;
	}],&#xd;
	&quot;workExperience&quot;: [],&#xd;
	&quot;education&quot;: [{&#xd;
		&quot;institution&quot;: &quot;NED&quot;,&#xd;
		&quot;degree&quot;: &quot;Bachelors&quot;,&#xd;
		&quot;major&quot;: &quot;Science&quot;,&#xd;
		&quot;startDate&quot;: 1364756400000,&#xd;
		&quot;isCurrent&quot;: true,&#xd;
		&quot;description&quot;: &quot;Test Education certificate&quot;,&#xd;
		&quot;skills&quot;: [&quot;grant writing&quot;]&#xd;
	}],&#xd;
	&quot;artifacts&quot;: [{&#xd;
		&quot;title&quot;: &quot;MY new artifact&quot;,&#xd;
		&quot;relatedExperience&quot;: &quot;MSC&quot;,&#xd;
		&quot;skills&quot;: [&quot;Tax Preparation&quot;],&#xd;
		&quot;urls&quot;: [&quot;${TechURL}&quot;]&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Job - For Accept" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Test Automation Job - Accept&quot;,&#xd;
	&quot;projectName&quot;: &quot;Test Automation Project&quot;,&#xd;
	&quot;description&quot;: &quot;Test Job Description&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date_midtime},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;));
vars.put(&quot;tz&quot;, vars.get(&quot;tzOffset&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">TZ-Offset</stringProp>
                  <stringProp name="Header.value">${tz}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Get JobId" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
log.info(obj.id);
vars.put(&quot;jobPostId&quot;, obj.id);</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchConsultant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/searches/consultants?searchText=${__P(search_emp_text)}&amp;skip=0&amp;limit=5&amp;sort=nameAsc&amp;areaOfExpertiseIds=${AOE_accounting}&amp;areaOfExpertiseIds=${AOE_marketing}&amp;areaOfExpertiseIds=${AOE_SoftwareDev}&amp;skillIds=${Skill0}&amp;skillIds=${Skill1}&amp;skillIds=${Skill8}&amp;skillIds=${Skill9}&amp;skillIds=${Skill24}&amp;skillIds=${Skill25}&amp;minHourlyRate=1&amp;maxHourlyRate=201</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Search Count" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">emp_search_count</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;count&quot;:(.+?)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Search Results" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData());
def response_data;
def data_object;

def act_text = props.get(&quot;search_cons_text&quot;)

for ( def i = 0 ; i &lt; json.data.size() ; i++ ){
	 response_data = json.data[i];
	 data_object = new groovy.json.JsonBuilder(response_data).toPrettyString()
	if(!data_object.toLowerCase().contains(act_text.toLowerCase())){
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Searched Result NOT Found&quot;);
	}
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SearchedJobs" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/searches/employers?searchText=${__P(search_cons_text)}&amp;skip=0&amp;limit=5&amp;sort=updatedAtDesc&amp;areaOfExpertiseIds=${AOE_accounting}&amp;areaOfExpertiseIds=${AOE_marketing}&amp;areaOfExpertiseIds=${AOE_SoftwareDev}&amp;skillIds=${Skill0}&amp;skillIds=${Skill1}&amp;skillIds=${Skill8}&amp;skillIds=${Skill9}&amp;skillIds=${Skill24}&amp;skillIds=${Skill25}&amp;minHourlyRate=1&amp;maxHourlyRate=201&amp;minDuration=0&amp;startDate=${current_date_midtime}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get Search Count" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cons_search_count</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;count&quot;:(.+?)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">1</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Search Results" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData());
def response_data;
def data_object;

def act_text = props.get(&quot;search_emp_text&quot;)

for ( def i = 0 ; i &lt; json.data.size() ; i++ ){
	 response_data = json.data[i];
	 data_object = new groovy.json.JsonBuilder(response_data).toPrettyString()
	if(!data_object.toLowerCase().contains(act_text.toLowerCase())){
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Searched Result NOT Found&quot;);
	}
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Public - SearchConsultant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/public/searches/consultants?searchText=${__P(search_emp_text)}&amp;skip=0&amp;limit=5&amp;sort=nameAsc&amp;areaOfExpertiseIds=${AOE_accounting}&amp;areaOfExpertiseIds=${AOE_marketing}&amp;areaOfExpertiseIds=${AOE_SoftwareDev}&amp;skillIds=${Skill0}&amp;skillIds=${Skill1}&amp;skillIds=${Skill8}&amp;skillIds=${Skill9}&amp;skillIds=${Skill24}&amp;skillIds=${Skill25}&amp;minHourlyRate=1&amp;maxHourlyRate=201</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">This API call does not require any auth token</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Search Results" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData());
def response_data;
def data_object;

def act_text = props.get(&quot;search_cons_text&quot;)

for ( def i = 0 ; i &lt; json.data.size() ; i++ ){
	 response_data = json.data[i];
	 data_object = new groovy.json.JsonBuilder(response_data).toPrettyString()
	if(!data_object.toLowerCase().contains(act_text.toLowerCase())){
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Searched Result NOT Found&quot;);
	}
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Public - SearchJobs" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/public/searches/employers?searchText=${__P(search_cons_text)}&amp;skip=0&amp;limit=5&amp;sort=updatedAtDesc&amp;areaOfExpertiseIds=${AOE_accounting}&amp;areaOfExpertiseIds=${AOE_marketing}&amp;areaOfExpertiseIds=${AOE_SoftwareDev}&amp;skillIds=${Skill0}&amp;skillIds=${Skill1}&amp;skillIds=${Skill8}&amp;skillIds=${Skill9}&amp;skillIds=${Skill24}&amp;skillIds=${Skill25}&amp;minHourlyRate=1&amp;maxHourlyRate=201&amp;minDuration=0&amp;startDate=${current_date_midtime}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">This API call does not require any auth token</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Search Results" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData());
def response_data;
def data_object;

def act_text = props.get(&quot;search_emp_text&quot;)

for ( def i = 0 ; i &lt; json.data.size() ; i++ ){
	 response_data = json.data[i];
	 data_object = new groovy.json.JsonBuilder(response_data).toPrettyString()
	if(!data_object.toLowerCase().contains(act_text.toLowerCase())){
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Searched Result NOT Found&quot;);
	}
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SaveSearch" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SaveFilter - EmptyTitle" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;&quot;,&#xd;
	&quot;categories&quot;: [&quot;${AOE_accounting}&quot;, &quot;${AOE_marketing}&quot;, &quot;${AOE_SoftwareDev}&quot;],&#xd;
	&quot;skills&quot;: [&quot;${Skill0}&quot;, &quot;${Skill1}&quot;, &quot;${Skill8}&quot;, &quot;${Skill9}&quot;, &quot;${Skill24}&quot;, &quot;${Skill25}&quot;],&#xd;
	&quot;hourlyRate&quot;: {&#xd;
		&quot;min&quot;: 1,&#xd;
		&quot;max&quot;: 201&#xd;
	},&#xd;
	&quot;status&quot;: {&#xd;
		&quot;available&quot;: true,&#xd;
		&quot;unavailable&quot;: true&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1303244685">Search title cannot be empty</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SaveFilter - Title&gt;150" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;AccountsAccountsAccountsAccountsAccountsAccountsAccountsAccountsAccountsAccountsAccountsAccountsAccountsAccountsAccountsAccountsAccountsAccountsAccoun123&quot;,&#xd;
	&quot;categories&quot;: [&quot;${AOE_accounting}&quot;, &quot;${AOE_marketing}&quot;, &quot;${AOE_SoftwareDev}&quot;],&#xd;
	&quot;skills&quot;: [&quot;${Skill0}&quot;, &quot;${Skill1}&quot;, &quot;${Skill8}&quot;, &quot;${Skill9}&quot;, &quot;${Skill24}&quot;, &quot;${Skill25}&quot;],&#xd;
	&quot;hourlyRate&quot;: {&#xd;
		&quot;min&quot;: 1,&#xd;
		&quot;max&quot;: 201&#xd;
	},&#xd;
	&quot;status&quot;: {&#xd;
		&quot;available&quot;: true,&#xd;
		&quot;unavailable&quot;: true&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="51508">400</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Error Message" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2121198965">Search title should be of less than characters: 150</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SaveFilter - Employer" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Accounts&quot;,&#xd;
	&quot;categories&quot;: [&quot;${AOE_accounting}&quot;, &quot;${AOE_marketing}&quot;, &quot;${AOE_SoftwareDev}&quot;],&#xd;
	&quot;skills&quot;: [&quot;${Skill0}&quot;, &quot;${Skill1}&quot;, &quot;${Skill8}&quot;, &quot;${Skill9}&quot;, &quot;${Skill24}&quot;, &quot;${Skill25}&quot;],&#xd;
	&quot;hourlyRate&quot;: {&#xd;
		&quot;min&quot;: 1,&#xd;
		&quot;max&quot;: 201&#xd;
	},&#xd;
	&quot;status&quot;: {&#xd;
		&quot;available&quot;: true,&#xd;
		&quot;unavailable&quot;: true&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">emp_searchFilter_Id</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SaveFilter - Consultant" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Accounts&quot;,&#xd;
	&quot;categories&quot;: [&quot;${AOE_accounting}&quot;, &quot;${AOE_marketing}&quot;, &quot;${AOE_SoftwareDev}&quot;],&#xd;
	&quot;skills&quot;: [&quot;${Skill0}&quot;, &quot;${Skill1}&quot;, &quot;${Skill8}&quot;, &quot;${Skill9}&quot;, &quot;${Skill24}&quot;, &quot;${Skill25}&quot;],&#xd;
	&quot;hourlyRate&quot;: {&#xd;
		&quot;min&quot;: 1,&#xd;
		&quot;max&quot;: 201&#xd;
	},&#xd;
	&quot;duration&quot;: {&#xd;
		&quot;min&quot;: 0&#xd;
	},&#xd;
	&quot;startDate&quot;: ${current_date_midtime}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">cons_searchFilter_Id</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;id&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSearchedFilter - Employer" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters?skip=0&amp;limit=5&amp;sort=dateDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify SearchFilter" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1596655">${emp_searchFilter_Id}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify SearchCount" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1720976233">${emp_search_count}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Search Results" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData());
def response_data;
def data_object;

def act_text = props.get(&quot;search_cons_text&quot;)

for ( def i = 0 ; i &lt; json.data.size() ; i++ ){
	 response_data = json.data[i];
	 data_object = new groovy.json.JsonBuilder(response_data).toPrettyString()
	if(!data_object.toLowerCase().contains(act_text.toLowerCase())){
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Searched Result NOT Found&quot;);
	}
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSearchedFilter - Consultant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters?skip=0&amp;limit=5&amp;sort=dateDesc</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify SearchFilter" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="531562490">${cons_searchFilter_Id}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Search Results" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData());
def response_data;
def data_object;

def act_text = props.get(&quot;search_cons_text&quot;)

for ( def i = 0 ; i &lt; json.data.size() ; i++ ){
	 response_data = json.data[i];
	 data_object = new groovy.json.JsonBuilder(response_data).toPrettyString()
	if(!data_object.toLowerCase().contains(act_text.toLowerCase())){
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Searched Result NOT Found&quot;);
	}
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify SearchCount" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1188106162">${cons_search_count}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFilterById - Employer" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters/${emp_searchFilter_Id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify SearchFilter" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1596655">${emp_searchFilter_Id}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify SearchCount" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1720976233">${emp_search_count}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Search Results" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData());
def response_data;
def data_object;

def act_text = props.get(&quot;search_cons_text&quot;)

for ( def i = 0 ; i &lt; json.data.size() ; i++ ){
	 response_data = json.data[i];
	 data_object = new groovy.json.JsonBuilder(response_data).toPrettyString()
	if(!data_object.toLowerCase().contains(act_text.toLowerCase())){
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Searched Result NOT Found&quot;);
	}
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetFilterbyId - Consultant" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters/${cons_searchFilter_Id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Status Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify SearchFilter" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="531562490">${cons_searchFilter_Id}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify SearchCount" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1188106162">${cons_search_count}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Verify Search Results" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">def json = new groovy.json.JsonSlurper().parse(prev.getResponseData());
def response_data;
def data_object;

def act_text = props.get(&quot;search_cons_text&quot;)

for ( def i = 0 ; i &lt; json.data.size() ; i++ ){
	 response_data = json.data[i];
	 data_object = new groovy.json.JsonBuilder(response_data).toPrettyString()
	if(!data_object.toLowerCase().contains(act_text.toLowerCase())){
		AssertionResult.setFailure(true);
		AssertionResult.setFailureMessage(&quot;Searched Result NOT Found&quot;);
	}
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateSearch" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateSearch - Employer" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Accounts&quot;,&#xd;
	&quot;categories&quot;: [],&#xd;
	&quot;categories&quot;: [&quot;${AOE_accounting}&quot;],&#xd;
	&quot;skills&quot;: [&quot;${Skill0}&quot;],&#xd;
	&quot;hourlyRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;status&quot;: {&#xd;
		&quot;available&quot;: true,&#xd;
		&quot;unavailable&quot;: true&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters/${emp_searchFilter_Id}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifyCategoryExist" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1794689943">${AOE_accounting}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifySkillExist" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1509538937">${Skill0}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifyCategoryNotExist" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1863309078">${AOE_marketing}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">52</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateSearch - Consultant" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;title&quot;: &quot;Accounts&quot;,&#xd;
	&quot;categories&quot;: [&quot;${AOE_accounting}&quot;],&#xd;
	&quot;skills&quot;: [&quot;${Skill0}&quot;],&#xd;
	&quot;hourlyRate&quot;: {&#xd;
		&quot;min&quot;: 90,&#xd;
		&quot;max&quot;: 95&#xd;
	},&#xd;
	&quot;duration&quot;: {&#xd;
		&quot;min&quot;: 2678400000&#xd;
	},&#xd;
	&quot;startDate&quot;: ${current_date_midtime}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters/${cons_searchFilter_Id}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifyCategoryExist" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1794689943">${AOE_accounting}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifySkillExist" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1509538937">${Skill0}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifyCategoryNotExist" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1863309078">${AOE_marketing}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">52</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DeleteSearch" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeleteFilter - InvalidId" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters/1234</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Text" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1364401315">searchFilterId format is not valid</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeleteFilter - Employer" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters/${emp_searchFilter_Id}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Text" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1912779935">{&quot;success&quot;:&quot;Search Filter Removed Successfully !&quot;}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeleteFilter - Consultant" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/searchFilters/${cons_searchFilter_Id}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify Response Text" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1912779935">{&quot;success&quot;:&quot;Search Filter Removed Successfully !&quot;}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Job" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/close</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1287622914">{&quot;status&quot;:&quot;close&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchScore" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PostJob" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;title&quot;: &quot;Test Job for MnS&quot;,&#xd;
    &quot;projectName&quot;: &quot;This is Test Project&quot;,&#xd;
    &quot;description&quot;: &quot;This is my second job posting&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date_midtime},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;));
vars.put(&quot;tz&quot;, vars.get(&quot;tzOffset&quot;));</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">TZ-Offset</stringProp>
                  <stringProp name="Header.value">${tz}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Get JobId" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
log.info(obj.id);
vars.put(&quot;jobPostId&quot;, obj.id);</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case1" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
&quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
            &#xd;
    &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 50,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill5}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill6}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill10}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill11}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill12}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill26}&quot;,&#xd;
            &quot;rank&quot;: 10,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 1" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 8&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 8&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 8&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 9&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill5}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 9&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill6}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 9&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill10}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 10&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill11}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 10&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill15}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 10&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill16}&quot;,&#xd;
            &quot;rank&quot;: 10,&#xd;
            &quot;experience&quot;: 10&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;experience&quot;: 1&#xd;
        }&#xd;
    ],&#xd;
    &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 40,&#xd;
        &quot;max&quot;: 120&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Mr.&quot;,&#xd;
    &quot;lastName&quot;: &quot;ABCD&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">87</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case2" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
       &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
   &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
            &#xd;
  &#xd;
    &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 20,&#xd;
        &quot;max&quot;: 40&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill5}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill6}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill10}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill11}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill12}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill13}&quot;,&#xd;
            &quot;rank&quot;: 10,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill5}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill6}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill10}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill11}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill12}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill13}&quot;,&#xd;
            &quot;rank&quot;: 10,&#xd;
            &quot;experience&quot;: 0&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;experience&quot;: 3&#xd;
        }&#xd;
    ],&#xd;
    &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 40&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Mr.&quot;,&#xd;
    &quot;lastName&quot;: &quot;ABCD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">12</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case3" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{    &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
   &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
  &#xd;
    &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 20,&#xd;
        &quot;max&quot;: 40&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill24}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill25}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill26}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill27}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill39}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill40}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill41}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill42}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 3" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill24}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 8&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill25}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 9&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill26}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill27}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill28}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill29}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 9&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill30}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill31}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill32}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill33}&quot;,&#xd;
            &quot;rank&quot;: 10,&#xd;
            &quot;experience&quot;: 1&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;experience&quot;: 5&#xd;
        }&#xd;
    ],&#xd;
    &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 40&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Mr.&quot;,&#xd;
    &quot;lastName&quot;: &quot;ABCD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">56</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case4" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 4" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
       &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
   &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 20,&#xd;
        &quot;max&quot;: 40&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill24}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill25}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill26}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill27}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill39}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill40}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill41}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill42}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 4" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill45}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill46}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill26}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill27}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 9&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill39}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 8&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill40}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 10&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill41}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill42}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill43}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill44}&quot;,&#xd;
            &quot;rank&quot;: 10,&#xd;
            &quot;experience&quot;: 2&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;experience&quot;: 6&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;experience&quot;: 7&#xd;
        }&#xd;
    ],&#xd;
    &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 40&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Mr.&quot;,&#xd;
    &quot;lastName&quot;: &quot;ABCD&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">48</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case5" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 5" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
   &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
   &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 50,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_writing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_IT}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill62}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill63}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill57}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 5" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill62}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill63}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill57}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill58}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill59}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill60}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill61}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill64}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill65}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill66}&quot;,&#xd;
            &quot;rank&quot;: 10,&#xd;
            &quot;experience&quot;: 4 &#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_writing}&quot;,&#xd;
            &quot;experience&quot;: 8&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_IT}&quot;,&#xd;
            &quot;experience&quot;: 9&#xd;
        }&#xd;
    ],&#xd;
    &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 40,&#xd;
        &quot;max&quot;: 120&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Mr.&quot;,&#xd;
    &quot;lastName&quot;: &quot;ABCD&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">68</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case6" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 6" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
   &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
   &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 50,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_writing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_IT}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill64}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill65}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill58}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 6" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
           &quot;id&quot;: &quot;${Skill64}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill59}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill60}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill61}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill66}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill67}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill68}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill69}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill70}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill63}&quot;,&#xd;
            &quot;rank&quot;: 10,&#xd;
            &quot;experience&quot;: 3&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
           &quot;id&quot;: &quot;${AOE_writing}&quot;,&#xd;
            &quot;experience&quot;: 10&#xd;
        },&#xd;
        {&#xd;
          &quot;id&quot;: &quot;${AOE_IT}&quot;,&#xd;
            &quot;experience&quot;: 11&#xd;
        }&#xd;
    ],&#xd;
    &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 40,&#xd;
        &quot;max&quot;: 120&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Mr.&quot;,&#xd;
    &quot;lastName&quot;: &quot;ABCD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">36</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case7" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 7" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
      &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
   &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
     &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 50,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill7}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill14}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill15}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill16}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill30}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill50}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill51}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill52}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 7" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 7&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill7}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 6&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill14}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill15}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 8&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill16}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 9&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill30}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 10&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill50}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill31}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 6&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill53}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 8&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;experience&quot;: 12&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;experience&quot;: 13&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;experience&quot;: 14&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;experience&quot;: 15&#xd;
        }&#xd;
    ],&#xd;
     &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 40,&#xd;
        &quot;max&quot;: 120&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Mr.&quot;,&#xd;
    &quot;lastName&quot;: &quot;ABCD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">88</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case8" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 8" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
   &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
     &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 1,&#xd;
        &quot;max&quot;: 4&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill16}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill31}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill32}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill53}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill54}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill55}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill56}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill40}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 8" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill16}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill31}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill32}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill53}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill35}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill41}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill42}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 0&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;experience&quot;: 3&#xd;
        }&#xd;
    ],&#xd;
     &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 1,&#xd;
        &quot;max&quot;: 4&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Mr.&quot;,&#xd;
    &quot;lastName&quot;: &quot;ABCD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">23</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case9" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 9" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
       &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
  &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
  &#xd;
     &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 50,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill20}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill29}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill30}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill45}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill46}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill47}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 9" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 7&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill20}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill29}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill30}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill45}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 6&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill46}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill47}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 5&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;experience&quot;: 6&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;experience&quot;: 7&#xd;
        }&#xd;
    ],&#xd;
     &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 40,&#xd;
        &quot;max&quot;: 120&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Mr.&quot;,&#xd;
    &quot;lastName&quot;: &quot;ABCD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">56</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case10" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 10" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
       &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
  &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
  &#xd;
     &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 50,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill20}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill29}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill30}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill45}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill46}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill47}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 10" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 7&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill20}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill29}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill30}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill45}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 6&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill46}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill47}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 5&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;experience&quot;: 6&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;experience&quot;: 7&#xd;
        }&#xd;
    ],&#xd;
     &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 40,&#xd;
        &quot;max&quot;: 120&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Mr.&quot;,&#xd;
    &quot;lastName&quot;: &quot;ABCD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">56</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case11" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 11" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
       &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
  &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
  &#xd;
     &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 50,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill20}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill29}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill30}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill45}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill46}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill47}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 11" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 7&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill20}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill29}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill30}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill45}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 6&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill46}&quot;,&#xd;
            &quot;rank&quot;: 8,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill47}&quot;,&#xd;
            &quot;rank&quot;: 9,&#xd;
            &quot;experience&quot;: 5&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_marketing}&quot;,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;experience&quot;: 6&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;experience&quot;: 7&#xd;
        }&#xd;
    ],&#xd;
     &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 40,&#xd;
        &quot;max&quot;: 120&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Mr.&quot;,&#xd;
    &quot;lastName&quot;: &quot;ABCD&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">56</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case12" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 12" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
 &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ], &#xd;
     &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
			&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 1,&#xd;
        &quot;max&quot;: 4&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_IT}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill5}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill6}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 12" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill5}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill6}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 3&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;experience&quot;: 8&#xd;
        }&#xd;
    ],&#xd;
    &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 1,&#xd;
        &quot;max&quot;: 4&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
  &quot;firstName&quot;: &quot;Mr.&quot;,&#xd;
    &quot;lastName&quot;: &quot;ABCD&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">40</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case13" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 13" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
       &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
   &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
  &#xd;
     &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
			&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 50,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_IT}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill59}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill60}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
		{&#xd;
            &quot;id&quot;: &quot;${Skill61}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 13" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 7&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 7&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill2}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 7&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill3}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 7&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill4}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 6&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill5}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 7&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill6}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 6&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
            &quot;experience&quot;: 9&#xd;
        }&#xd;
    ],&#xd;
    &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 40,&#xd;
        &quot;max&quot;: 120&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Ayesha&quot;,&#xd;
    &quot;lastName&quot;: &quot;Siddiqa&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">60</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case14" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 14" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
       &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
  &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
  &#xd;
      &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
     &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 50,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_writing}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill62}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill63}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 14" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill62}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 8&#xd;
        },&#xd;
        {&#xd;
             &quot;id&quot;: &quot;${Skill63}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 9&#xd;
        },&#xd;
        {&#xd;
             &quot;id&quot;: &quot;${Skill64}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 8&#xd;
        },&#xd;
        {&#xd;
             &quot;id&quot;: &quot;${Skill65}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 9&#xd;
        },&#xd;
        {&#xd;
             &quot;id&quot;: &quot;${Skill66}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 10&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill67}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 8&#xd;
        },&#xd;
        {&#xd;
             &quot;id&quot;: &quot;${Skill68}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 9&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_writing}&quot;,&#xd;
            &quot;experience&quot;: 10&#xd;
        }&#xd;
    ],&#xd;
    &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 40,&#xd;
        &quot;max&quot;: 120&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Ayesha&quot;,&#xd;
    &quot;lastName&quot;: &quot;Siddiqa&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">100</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case15" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 15" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
       &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
   &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
      &quot;min&quot;: 50,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill40}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill41}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill42}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill43}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill44}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill51}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 6&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor GET jobPostId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">jobPostId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 15" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill40}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 10&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill41}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 9&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill42}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 8&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill43}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 7&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill44}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 6&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill51}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill52}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;experience&quot;: 11&#xd;
        }&#xd;
    ],&#xd;
    &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 40,&#xd;
        &quot;max&quot;: 120&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Ayesha&quot;,&#xd;
    &quot;lastName&quot;: &quot;Siddiqa&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">93</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case16" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 16" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
       &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
   &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
      &quot;min&quot;: 50,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill44}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill45}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill46}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill47}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill53}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill54}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 6&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 16" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill44}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 0&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill45}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill46}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill47}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill53}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 5&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill51}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill52}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 5&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_design}&quot;,&#xd;
            &quot;experience&quot;: 12&#xd;
        }&#xd;
    ],&#xd;
    &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 40,&#xd;
        &quot;max&quot;: 120&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Ayesha&quot;,&#xd;
    &quot;lastName&quot;: &quot;Siddiqa&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">42</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case17" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 17" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
&quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
    &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 50,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill33}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill34}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill35}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill36}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill37}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 5&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 17" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill33}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 17&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill34}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill35}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 11&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill36}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 9&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill37}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 20&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill30}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill31}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 3&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;experience&quot;: 0&#xd;
        }&#xd;
    ],&#xd;
    &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 40,&#xd;
        &quot;max&quot;: 120&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Ayesha&quot;,&#xd;
    &quot;lastName&quot;: &quot;Siddiqa&quot;&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">73</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MatchnScore -- Case18" enabled="true"/>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Job  -- Case 18" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;projectName&quot;: &quot;MnS Project&quot;, &#xd;
    &quot;title&quot;: &quot;MnS job&quot;, &#xd;
    &quot;description&quot;: &quot;MnS Project summary&quot;,&#xd;
    &quot;hoursPerWeek&quot;: {&#xd;
        &quot;min&quot;: 10,&#xd;
        &quot;max&quot;: 20&#xd;
    },&#xd;
   &quot;locations&quot;: ${locationId},&#xd;
            &quot;isRemote&quot;: true } ],&#xd;
  &#xd;
    &quot;deadline&quot;: 1637236410021,&#xd;
    &quot;startDate&quot;: 1668772410021,&#xd;
    &quot;isOpenEnded&quot;: true,&#xd;
    &quot;hourlyPayRate&quot;: {&#xd;
        &quot;min&quot;: 50,&#xd;
        &quot;max&quot;: 100&#xd;
    },&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;isRequired&quot;: false,&#xd;
            &quot;experience&quot;: {&#xd;
                &quot;value&quot;: 0,&#xd;
                &quot;isRequired&quot;: false&#xd;
            }&#xd;
        }&#xd;
    ],&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill33}&quot;,&#xd;
            &quot;experience&quot;: 3,&#xd;
            &quot;rank&quot;: 1&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill34}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill35}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 3&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill36}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill37}&quot;,&#xd;
            &quot;experience&quot;: 4,&#xd;
            &quot;rank&quot;: 5&#xd;
        }&#xd;
    ],&#xd;
    &quot;visibility&quot;: true,&#xd;
    &quot;isDraft&quot;: false&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Consultant -- Case 18" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;skills&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill33}&quot;,&#xd;
            &quot;rank&quot;: 1,&#xd;
            &quot;experience&quot;: 17&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill24}&quot;,&#xd;
            &quot;rank&quot;: 2,&#xd;
            &quot;experience&quot;: 4&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill25}&quot;,&#xd;
            &quot;rank&quot;: 3,&#xd;
            &quot;experience&quot;: 14&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill26}&quot;,&#xd;
            &quot;rank&quot;: 4,&#xd;
            &quot;experience&quot;: 9&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill27}&quot;,&#xd;
            &quot;rank&quot;: 5,&#xd;
            &quot;experience&quot;: 17&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill28}&quot;,&#xd;
            &quot;rank&quot;: 6,&#xd;
            &quot;experience&quot;: 2&#xd;
        },&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${Skill29}&quot;,&#xd;
            &quot;rank&quot;: 7,&#xd;
            &quot;experience&quot;: 4&#xd;
        }&#xd;
    ],&#xd;
    &quot;workingHours&quot;: 30,&#xd;
    &quot;areaOfExpertise&quot;: [&#xd;
        {&#xd;
            &quot;id&quot;: &quot;${AOE_SoftwareDev}&quot;,&#xd;
            &quot;experience&quot;: 1&#xd;
        }&#xd;
    ],&#xd;
    &quot;hourlyRate&quot;: {&#xd;
        &quot;min&quot;: 40,&#xd;
        &quot;max&quot;: 120&#xd;
    },&#xd;
	&quot;title&quot;: &quot;Auto C&quot;,&#xd;
&#xd;
    &quot;address&quot;: &quot;17200&quot;,&#xd;
    &quot;commuteRadius&quot;: 15,&#xd;
   &quot;firstName&quot;: &quot;Ayesha&quot;,&#xd;
    &quot;lastName&quot;: &quot;Siddiqa&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Total Match Count" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Job Matched Consultant and Score" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="skip" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">skip</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${count}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/match</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="Verify MatchScore" enabled="true">
                <stringProp name="JSON_PATH">$..[?(@.id == &apos;${cons_Id}&apos;)].matchResult.score</stringProp>
                <stringProp name="EXPECTED_VALUE">37</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Verify ConsultantId" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1729542134">&quot;id&quot;:&quot;${cons_Id}&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data_as_document</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CloseJob" enabled="true"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CloseJob" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/close</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1287622914">{&quot;status&quot;:&quot;close&quot;}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">48</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CompanyNameExistCase" enabled="true"/>
        <hashTree>
          <com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfig guiclass="com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfigGui" testclass="com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfig" testname="PhantomJS Driver Config" enabled="true">
            <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
            <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
            <stringProp name="WebDriverConfig.http_host"></stringProp>
            <intProp name="WebDriverConfig.http_port">8080</intProp>
            <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
            <stringProp name="WebDriverConfig.https_host"></stringProp>
            <intProp name="WebDriverConfig.https_port">8080</intProp>
            <stringProp name="WebDriverConfig.ftp_host"></stringProp>
            <intProp name="WebDriverConfig.ftp_port">8080</intProp>
            <stringProp name="WebDriverConfig.socks_host"></stringProp>
            <intProp name="WebDriverConfig.socks_port">8080</intProp>
            <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
            <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
            <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
            <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
            <stringProp name="PhantomJSDriverConfig.phantomjs_path">${__P(phantomexe_filepath)}</stringProp>
            <stringProp name="PhantomJSDriverConfig.phantomjs_cli_args">--web-security=false, --ignore-ssl-errors=true,--webdriver-loglevel=NONE</stringProp>
            <stringProp name="PhantomJSDriverConfig.phantomjs_ghostdriver_cli_args"></stringProp>
          </com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfig>
          <hashTree/>
          <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Employer Login Sampler" enabled="true">
            <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium); //WebDriver classes
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait); //WebDriver classes
var wait = new support_ui.WebDriverWait(WDS.browser, 5000);

WDS.sampleResult.sampleStart(); //captures sampler&apos;s start time
WDS.sampleResult.getLatency();
WDS.log.info(&quot;Sample started&quot;);

WDS.browser.get(&quot;${__P(employer_index_filepath2)}&quot;); //opens website specified in &apos;http://duckduckgo.com&apos; // Update this URL
WDS.log.info(&quot;Sample ended - navigated to Cherry&quot;);

java.lang.Thread.sleep( 10000 )

var token = WDS.browser.findElement(pkg.By.id(&apos;successAndErrorMessages&apos;));
WDS.log.info(token.getText());
var props = org.apache.jmeter.util.JMeterUtils.getJMeterProperties();
props.put(&apos;empaccesstoken&apos;,token.getText())
WDS.log.info(props.get(&quot;empaccesstoken&quot;));

WDS.sampleResult.sampleEnd();</stringProp>
            <stringProp name="WebDriverSampler.parameters"></stringProp>
            <stringProp name="WebDriverSampler.language">javascript</stringProp>
          </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateEmployer-CompNameExisted" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;companyName&quot;: &quot;${comp_name}&quot;,&#xd;
	&quot;website&quot;: &quot;&quot;,&#xd;
	&quot;specialities&quot;: [],&#xd;
	&quot;additionalSpecialities&quot;: [&quot;Apps&quot;, &quot;DevOps&quot;],&#xd;
	&quot;companyDescription&quot;: &quot;This is my company&quot;,&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;isHeadquarter&quot;: true&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1548526857">Employer already exists</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifyErrorCode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CreateEmployer" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;companyName&quot;: &quot;${__RandomString(10,abcdefghijklmnopqrstuvwxyz,)}&quot;,&#xd;
	&quot;website&quot;: &quot;&quot;,&#xd;
	&quot;specialities&quot;: [],&#xd;
	&quot;additionalSpecialities&quot;: [&quot;Apps&quot;, &quot;DevOps&quot;],&#xd;
	&quot;companyDescription&quot;: &quot;This is my company&quot;,&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;isHeadquarter&quot;: true&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifyStatusCode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49587">201</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateEmployer-CompNameExisted" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;companyName&quot;: &quot;${comp_name}&quot;,&#xd;
	&quot;website&quot;: &quot;&quot;,&#xd;
	&quot;specialities&quot;: [],&#xd;
	&quot;additionalSpecialities&quot;: [&quot;Apps&quot;, &quot;DevOps&quot;],&#xd;
	&quot;companyDescription&quot;: &quot;This is my company&quot;,&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;isHeadquarter&quot;: true&#xd;
	}]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-640356586">Company name already exists</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifyErrorCode" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="51508">400</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ConsultantProfile" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512892901000</longProp>
        <longProp name="ThreadGroup.end_time">1512892901000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">token</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateConsultantProfle-NegativeCases" enabled="true">
          <stringProp name="TestPlan.comments">Verify Mandatory params &amp; Send Valid data - Level 1 and Level 2 scenarios (Sprint14 - row 45,46 are defect)</stringProp>
        </GenericController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">ConsultantProfileTestData.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="UploadArtifact" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Artifact" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">------WebKitFormBoundaryHlhLhG2WOFptFgnJ&#xd;
Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;Tulips.jpg&quot;&#xd;
Content-Type: image/jpeg&#xd;
&#xd;
&#xd;
------WebKitFormBoundaryHlhLhG2WOFptFgnJ&#xd;
Content-Disposition: form-data; name=&quot;type&quot;&#xd;
&#xd;
artifact&#xd;
------WebKitFormBoundaryHlhLhG2WOFptFgnJ--</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/files</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">multipart/form-data; boundary=----WebKitFormBoundaryHlhLhG2WOFptFgnJ</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">artifactURL</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.url</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSkillsofCategories" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/public/categories/skills</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">This is Finalized Call where all Ids are extracted</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_accounting" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_accounting</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_marketing" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_marketing</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_SoftwareDev" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_SoftwareDev</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_design" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_design</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_IT" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_IT</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_writing" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_writing</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Accounting_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill0;Skill1;Skill2;Skill3;Skill4;Skill5;Skill6;Skill7</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos;)].skills[0].id;$..[?(@.name == &apos;Accounting&apos;)].skills[1].id;$..[?(@.name == &apos;Accounting&apos;)].skills[2].id;$..[?(@.name == &apos;Accounting&apos;)].skills[3].id;$..[?(@.name == &apos;Accounting&apos;)].skills[4].id;$..[?(@.name == &apos;Accounting&apos;)].skills[5].id;$..[?(@.name == &apos;Accounting&apos;)].skills[6].id;$..[?(@.name == &apos;Accounting&apos;)].skills[7].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Marketing_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill8;Skill9;Skill10;Skill11;Skill12;Skill13;Skill14;Skill15;Skill16;Skill17;Skill18;Skill19;Skill20;Skill21;Skill22;Skill23</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos;)].skills[0].id;$..[?(@.name == &apos;Marketing&apos;)].skills[1].id;$..[?(@.name == &apos;Marketing&apos;)].skills[2].id;$..[?(@.name == &apos;Marketing&apos;)].skills[3].id;$..[?(@.name == &apos;Marketing&apos;)].skills[4].id;$..[?(@.name == &apos;Marketing&apos;)].skills[5].id;$..[?(@.name == &apos;Marketing&apos;)].skills[6].id;$..[?(@.name == &apos;Marketing&apos;)].skills[7].id;$..[?(@.name == &apos;Marketing&apos;)].skills[8].id;$..[?(@.name == &apos;Marketing&apos;)].skills[9].id;$..[?(@.name == &apos;Marketing&apos;)].skills[10].id;$..[?(@.name == &apos;Marketing&apos;)].skills[11].id;$..[?(@.name == &apos;Marketing&apos;)].skills[12].id;$..[?(@.name == &apos;Marketing&apos;)].skills[13].id;$..[?(@.name == &apos;Marketing&apos;)].skills[14].id;$..[?(@.name == &apos;Marketing&apos;)].skills[15].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Software Development_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill24;Skill25;Skill26;Skill27;Skill28;Skill29;Skill30;Skill31;Skill32;Skill33;Skill34;Skill35;Skill36;Skill37;Skill38</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos;)].skills[0].id;$..[?(@.name == &apos;Software Development&apos;)].skills[1].id;$..[?(@.name == &apos;Software Development&apos;)].skills[2].id;$..[?(@.name == &apos;Software Development&apos;)].skills[3].id;$..[?(@.name == &apos;Software Development&apos;)].skills[4].id;$..[?(@.name == &apos;Software Development&apos;)].skills[5].id;$..[?(@.name == &apos;Software Development&apos;)].skills[6].id;$..[?(@.name == &apos;Software Development&apos;)].skills[7].id;$..[?(@.name == &apos;Software Development&apos;)].skills[8].id;$..[?(@.name == &apos;Software Development&apos;)].skills[9].id;$..[?(@.name == &apos;Software Development&apos;)].skills[10].id;$..[?(@.name == &apos;Software Development&apos;)].skills[11].id;$..[?(@.name == &apos;Software Development&apos;)].skills[12].id;$..[?(@.name == &apos;Software Development&apos;)].skills[13].id;$..[?(@.name == &apos;Software Development&apos;)].skills[14].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Design_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill39;Skill40;Skill41;Skill42;Skill43;Skill44;Skill45;Skill46;Skill47;Skill48;Skill49;Skill50;Skill51;Skill52;Skill53;Skill54;Skill55;Skill56</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos;)].skills[0].id;$..[?(@.name == &apos;Design&apos;)].skills[1].id;$..[?(@.name == &apos;Design&apos;)].skills[2].id;$..[?(@.name == &apos;Design&apos;)].skills[3].id;$..[?(@.name == &apos;Design&apos;)].skills[4].id;$..[?(@.name == &apos;Design&apos;)].skills[5].id;$..[?(@.name == &apos;Design&apos;)].skills[6].id;$..[?(@.name == &apos;Design&apos;)].skills[7].id;$..[?(@.name == &apos;Design&apos;)].skills[8].id;$..[?(@.name == &apos;Design&apos;)].skills[9].id;$..[?(@.name == &apos;Design&apos;)].skills[10].id;$..[?(@.name == &apos;Design&apos;)].skills[11].id;$..[?(@.name == &apos;Design&apos;)].skills[12].id;$..[?(@.name == &apos;Design&apos;)].skills[13].id;$..[?(@.name == &apos;Design&apos;)].skills[14].id;$..[?(@.name == &apos;Design&apos;)].skills[15].id;$..[?(@.name == &apos;Design&apos;)].skills[16].id;$..[?(@.name == &apos;Design&apos;)].skills[17].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="IT services_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill57;Skill58;Skill59;Skill60;Skill61</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos;)].skills[0].id;$..[?(@.name == &apos;IT Services&apos;)].skills[1].id;$..[?(@.name == &apos;IT Services&apos;)].skills[2].id;$..[?(@.name == &apos;IT Services&apos;)].skills[3].id;$..[?(@.name == &apos;IT Services&apos;)].skills[4].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Writing &amp; Editing_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill62;Skill63;Skill64;Skill65;Skill66;Skill67;Skill68;Skill69;Skill70</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[0].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[1].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[2].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[3].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[4].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[5].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[6].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[7].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[8].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Consultant${Create/Update}Profile--${test.description}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.engine.util.CompoundVariable;
import org.apache.commons.io.FileUtils;
import org.apache.jmeter.protocol.http.util.HTTPArgument;


def httpMethod = vars.get(&quot;http.method&quot;);
sampler.setMethod(httpMethod);


if(!vars.get(&quot;input.json&quot;).equals(&quot;&quot;))
{
def postedData = new CompoundVariable(new File(vars.get(&quot;input.json&quot;)).text).execute();
def arg= new HTTPArgument(&quot;&quot;, postedData, null, true);
arg.setAlwaysEncoded(false);
sampler.getArguments().addArgument(arg);

log.info(postedData);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="461893074">${assertion}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ConsultantProfileSettings" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512892901000</longProp>
        <longProp name="ThreadGroup.end_time">1512892901000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">token</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateConsultantSettings" enabled="true"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">ConsultantSettingTestData.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get my profile" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/profile/me</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Settings - ${test.description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;firstName&quot;:&quot;${firstName}&quot;,&#xd;
	&quot;lastName&quot;:&quot;${lastName}&quot;,&#xd;
	&quot;phone&quot;:&quot;${phone}&quot;&#xd;
	}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/consultants</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;consaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="461893074">${assertion}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">48</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="LoginAgain" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1505715071000</longProp>
        <longProp name="ThreadGroup.end_time">1505715071000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">This thread Group takes access token from browser and set it into jmeter property</stringProp>
      </ThreadGroup>
      <hashTree>
        <com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfig guiclass="com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfigGui" testclass="com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfig" testname="PhantomJS Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="PhantomJSDriverConfig.phantomjs_path">${__P(phantomexe_filepath)}</stringProp>
          <stringProp name="PhantomJSDriverConfig.phantomjs_cli_args">--web-security=false, --ignore-ssl-errors=true,--webdriver-loglevel=NONE</stringProp>
          <stringProp name="PhantomJSDriverConfig.phantomjs_ghostdriver_cli_args"></stringProp>
        </com.blazemeter.jmeter.webdriver.phantomjs.PhantomJSDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Employer Login Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium); //WebDriver classes
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait); //WebDriver classes
var wait = new support_ui.WebDriverWait(WDS.browser, 5000);

WDS.sampleResult.sampleStart(); //captures sampler&apos;s start time
WDS.sampleResult.getLatency();
WDS.log.info(&quot;Sample started&quot;);

WDS.browser.get(&quot;${__P(employer_index_filepath)}&quot;); //opens website specified in &apos;http://duckduckgo.com&apos; // Update this URL
WDS.log.info(&quot;Sample ended - navigated to Cherry&quot;);

java.lang.Thread.sleep( 10000 )

var token = WDS.browser.findElement(pkg.By.id(&apos;successAndErrorMessages&apos;));
WDS.log.info(token.getText());
var props = org.apache.jmeter.util.JMeterUtils.getJMeterProperties();
props.put(&apos;empaccesstoken&apos;,token.getText())
WDS.log.info(props.get(&quot;empaccesstoken&quot;));

WDS.sampleResult.sampleEnd();</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Consultant Login Sampler" enabled="false">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium); //WebDriver classes
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait); //WebDriver classes
var wait = new support_ui.WebDriverWait(WDS.browser, 5000);

WDS.sampleResult.sampleStart(); //captures sampler&apos;s start time
WDS.sampleResult.getLatency();
WDS.log.info(&quot;Sample started&quot;);

WDS.log.info(&quot;${__P(consultant_index_filepath)}&quot;);

//var url_path = props.get(&apos;consultant_index_filepath&apos;)

WDS.browser.get(&quot;${__P(consultant_index_filepath)}&quot;); //opens website specified in &apos;http://duckduckgo.com&apos; // Update this URL
WDS.log.info(&quot;Sample ended - navigated to Cherry&quot;);

java.lang.Thread.sleep( 10000 )

var token = WDS.browser.findElement(pkg.By.id(&apos;successAndErrorMessages&apos;));
WDS.log.info(token.getText());
var props = org.apache.jmeter.util.JMeterUtils.getJMeterProperties();
props.put(&apos;consaccesstoken&apos;,token.getText())
WDS.log.info(props.get(&quot;consaccesstoken&quot;));

WDS.sampleResult.sampleEnd();
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="EmployerProfile" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512892901000</longProp>
        <longProp name="ThreadGroup.end_time">1512892901000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">token</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="UpdateEmployerProfle-NegativeCases" enabled="true">
          <stringProp name="TestPlan.comments">Verify Mandatory params &amp; Send Valid data - Level 1 and Level 2 scenarios</stringProp>
        </GenericController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">EmployerTestData.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Employer ${Create/Update} Profile --  ${test.description}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/employers</stringProp>
            <stringProp name="HTTPSampler.method"></stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import org.apache.jmeter.engine.util.CompoundVariable;
import org.apache.commons.io.FileUtils;
import org.apache.jmeter.protocol.http.util.HTTPArgument;


def httpMethod = vars.get(&quot;http.method&quot;);
sampler.setMethod(httpMethod);


if(!vars.get(&quot;input.json&quot;).equals(&quot;&quot;))
{
def postedData = new CompoundVariable(new File(vars.get(&quot;input.json&quot;)).text).execute();
def arg= new HTTPArgument(&quot;&quot;, postedData, null, true);
arg.setAlwaysEncoded(false);
sampler.getArguments().addArgument(arg);

log.info(postedData);
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="461893074">${assertion}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CreateJob" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512892901000</longProp>
        <longProp name="ThreadGroup.end_time">1512892901000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">token</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Job Post - Negative Cases Set 2" enabled="true">
          <stringProp name="TestPlan.comments">Ayesha</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">JobPostTestData.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Locations" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/locations</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">locationId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">*</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">locationId</stringProp>
                <stringProp name="RegexExtractor.regex">^(.*).{2}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSkillsofCategories" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/public/categories/skills</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">This is Finalized Call where all Ids are extracted</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_accounting" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_accounting</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_marketing" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_marketing</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_SoftwareDev" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_SoftwareDev</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_design" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_design</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_IT" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_IT</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_writing" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_writing</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Accounting_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill0;Skill1;Skill2;Skill3;Skill4;Skill5;Skill6;Skill7</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos;)].skills[0].id;$..[?(@.name == &apos;Accounting&apos;)].skills[1].id;$..[?(@.name == &apos;Accounting&apos;)].skills[2].id;$..[?(@.name == &apos;Accounting&apos;)].skills[3].id;$..[?(@.name == &apos;Accounting&apos;)].skills[4].id;$..[?(@.name == &apos;Accounting&apos;)].skills[5].id;$..[?(@.name == &apos;Accounting&apos;)].skills[6].id;$..[?(@.name == &apos;Accounting&apos;)].skills[7].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Marketing_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill8;Skill9;Skill10;Skill11;Skill12;Skill13;Skill14;Skill15;Skill16;Skill17;Skill18;Skill19;Skill20;Skill21;Skill22;Skill23</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos;)].skills[0].id;$..[?(@.name == &apos;Marketing&apos;)].skills[1].id;$..[?(@.name == &apos;Marketing&apos;)].skills[2].id;$..[?(@.name == &apos;Marketing&apos;)].skills[3].id;$..[?(@.name == &apos;Marketing&apos;)].skills[4].id;$..[?(@.name == &apos;Marketing&apos;)].skills[5].id;$..[?(@.name == &apos;Marketing&apos;)].skills[6].id;$..[?(@.name == &apos;Marketing&apos;)].skills[7].id;$..[?(@.name == &apos;Marketing&apos;)].skills[8].id;$..[?(@.name == &apos;Marketing&apos;)].skills[9].id;$..[?(@.name == &apos;Marketing&apos;)].skills[10].id;$..[?(@.name == &apos;Marketing&apos;)].skills[11].id;$..[?(@.name == &apos;Marketing&apos;)].skills[12].id;$..[?(@.name == &apos;Marketing&apos;)].skills[13].id;$..[?(@.name == &apos;Marketing&apos;)].skills[14].id;$..[?(@.name == &apos;Marketing&apos;)].skills[15].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Software Development_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill24;Skill25;Skill26;Skill27;Skill28;Skill29;Skill30;Skill31;Skill32;Skill33;Skill34;Skill35;Skill36;Skill37;Skill38</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos;)].skills[0].id;$..[?(@.name == &apos;Software Development&apos;)].skills[1].id;$..[?(@.name == &apos;Software Development&apos;)].skills[2].id;$..[?(@.name == &apos;Software Development&apos;)].skills[3].id;$..[?(@.name == &apos;Software Development&apos;)].skills[4].id;$..[?(@.name == &apos;Software Development&apos;)].skills[5].id;$..[?(@.name == &apos;Software Development&apos;)].skills[6].id;$..[?(@.name == &apos;Software Development&apos;)].skills[7].id;$..[?(@.name == &apos;Software Development&apos;)].skills[8].id;$..[?(@.name == &apos;Software Development&apos;)].skills[9].id;$..[?(@.name == &apos;Software Development&apos;)].skills[10].id;$..[?(@.name == &apos;Software Development&apos;)].skills[11].id;$..[?(@.name == &apos;Software Development&apos;)].skills[12].id;$..[?(@.name == &apos;Software Development&apos;)].skills[13].id;$..[?(@.name == &apos;Software Development&apos;)].skills[14].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Design_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill39;Skill40;Skill41;Skill42;Skill43;Skill44;Skill45;Skill46;Skill47;Skill48;Skill49;Skill50;Skill51;Skill52;Skill53;Skill54;Skill55;Skill56</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos;)].skills[0].id;$..[?(@.name == &apos;Design&apos;)].skills[1].id;$..[?(@.name == &apos;Design&apos;)].skills[2].id;$..[?(@.name == &apos;Design&apos;)].skills[3].id;$..[?(@.name == &apos;Design&apos;)].skills[4].id;$..[?(@.name == &apos;Design&apos;)].skills[5].id;$..[?(@.name == &apos;Design&apos;)].skills[6].id;$..[?(@.name == &apos;Design&apos;)].skills[7].id;$..[?(@.name == &apos;Design&apos;)].skills[8].id;$..[?(@.name == &apos;Design&apos;)].skills[9].id;$..[?(@.name == &apos;Design&apos;)].skills[10].id;$..[?(@.name == &apos;Design&apos;)].skills[11].id;$..[?(@.name == &apos;Design&apos;)].skills[12].id;$..[?(@.name == &apos;Design&apos;)].skills[13].id;$..[?(@.name == &apos;Design&apos;)].skills[14].id;$..[?(@.name == &apos;Design&apos;)].skills[15].id;$..[?(@.name == &apos;Design&apos;)].skills[16].id;$..[?(@.name == &apos;Design&apos;)].skills[17].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="IT services_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill57;Skill58;Skill59;Skill60;Skill61</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos;)].skills[0].id;$..[?(@.name == &apos;IT Services&apos;)].skills[1].id;$..[?(@.name == &apos;IT Services&apos;)].skills[2].id;$..[?(@.name == &apos;IT Services&apos;)].skills[3].id;$..[?(@.name == &apos;IT Services&apos;)].skills[4].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Writing &amp; Editing_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill62;Skill63;Skill64;Skill65;Skill66;Skill67;Skill68;Skill69;Skill70</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[0].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[1].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[2].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[3].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[4].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[5].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[6].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[7].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[8].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Job ${Saved as Draft/Post}  -- ${test.description}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Get JobId" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
log.info(obj.id);
vars.put(&quot;jobPostId&quot;, obj.id);</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">import org.apache.jmeter.engine.util.CompoundVariable;
import org.apache.commons.io.FileUtils;
import org.apache.jmeter.protocol.http.util.HTTPArgument;


def httpMethod = vars.get(&quot;http.method&quot;);
sampler.setMethod(httpMethod);


if(!vars.get(&quot;input.json&quot;).equals(&quot;&quot;))
{
	
def postedData = new CompoundVariable(new File(vars.get(&quot;input.json&quot;)).text).execute();
def arg= new HTTPArgument(&quot;&quot;, postedData, null, true);
arg.setAlwaysEncoded(false);
sampler.getArguments().addArgument(arg);

log.info(postedData);
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="461893074">${assertion}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="UpdateJob" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1512892901000</longProp>
        <longProp name="ThreadGroup.end_time">1512892901000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">token</stringProp>
              <stringProp name="Header.value">${token}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update Job Post - Negative Cases Set 2" enabled="true">
          <stringProp name="TestPlan.comments">Ayesha</stringProp>
        </GenericController>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">UpdateJobPostTestData.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.thread</stringProp>
          </CSVDataSet>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true">
            <stringProp name="TestPlan.comments">SettingUp Items, Getting Skill Ids, Creating Job</stringProp>
          </OnceOnlyController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get Employer&apos;s Location ID" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="876395015">Cherry API Functional Automation</stringProp>
                <stringProp name="1091748887">Get Employer&apos;s Location ID</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="SetupItems" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">var today1 = new Date();
var today2 = new Date();
var today3 = new Date();
var hour1 = 10;
var hour2 = 10;
var hourlyrate = 2;

var emp_rating = 2;
var cons_rating = 3;
var review_att1 = &quot;Communication&quot;;
var review_att2 = &quot;Job Description&quot;;

log.info(today1.getTimezoneOffset()*60*1000);
log.info(today1.setDate(today1.getDate())) //  current date
log.info(today2.setDate(today2.getDate() + 2)) // Future Date
log.info(today3.setDate(today3.getDate() - 5)) // Past Dates

//d2.setHours ( d1.getHours() + 6 );

//log.info(&quot;Actual Date is&quot; + today1.setDate(today1.getDate()))
log.info(&quot;Current Date with 6 hours add &quot; + today1.setHours(today1.getHours() + 1));

var tz_offset = today1.getTimezoneOffset()*60*1000;
var date_5 = today1.setHours(today1.getHours() + 1);
var date_1 = today1.setDate(today1.getDate())
today2.setDate(today2.getDate() + 2)
var date_3 = today3.setDate(today3.getDate() - 5)
var date4_midtime = today1.setHours(0,0,0,0);
var date_2 = today2.setHours(0,0,0,0);

vars.put(&quot;tzOffset&quot;, tz_offset);
vars.put(&quot;current_date&quot;, date_1);
vars.put(&quot;future_date&quot;, date_2);
vars.put(&quot;past_date&quot;, date_3);
vars.put(&quot;current_date_midtime&quot;, date4_midtime);
vars.put(&quot;current_date_addhours&quot;, date_5);

vars.put(&quot;hour_1&quot;, hour1);
vars.put(&quot;hour_2&quot;, hour2);
vars.put(&quot;hourly_rate&quot;, hourlyrate);

vars.put(&quot;emp_rating&quot;, emp_rating);
vars.put(&quot;cons_rating&quot;, cons_rating);
vars.put(&quot;review_att1&quot;, review_att1);
vars.put(&quot;review_att2&quot;, review_att2);

vars.put(&quot;invalid_values&quot;, &quot;1234&quot;);

//vars.put(&quot;jobPostId&quot;, &quot;14:2602&quot;);
//vars.put(&quot;jobPostId2&quot;, &quot;14:2472&quot;);
//vars.put(&quot;jobPostId3&quot;, &quot;14:2474&quot;);
//vars.put(&quot;jobPostId4&quot;, &quot;14:2558&quot;);
//
//
//vars.put(&quot;app_id&quot;, &quot;33:1010&quot;);
//vars.put(&quot;app_id2&quot;, &quot;32:1028&quot;);
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetSkillsofCategories" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/public/categories/skills</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="TestPlan.comments">This is Finalized Call where all Ids are extracted</stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_accounting" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_accounting</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_marketing" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_marketing</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_SoftwareDev" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_SoftwareDev</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_design" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_design</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_IT" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_IT</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="AOE_writing" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">AOE_writing</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos; &amp;&amp;@.type == &apos;aoe&apos;)].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Accounting_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill0;Skill1;Skill2;Skill3;Skill4;Skill5;Skill6;Skill7</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Accounting&apos;)].skills[0].id;$..[?(@.name == &apos;Accounting&apos;)].skills[1].id;$..[?(@.name == &apos;Accounting&apos;)].skills[2].id;$..[?(@.name == &apos;Accounting&apos;)].skills[3].id;$..[?(@.name == &apos;Accounting&apos;)].skills[4].id;$..[?(@.name == &apos;Accounting&apos;)].skills[5].id;$..[?(@.name == &apos;Accounting&apos;)].skills[6].id;$..[?(@.name == &apos;Accounting&apos;)].skills[7].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Marketing_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill8;Skill9;Skill10;Skill11;Skill12;Skill13;Skill14;Skill15;Skill16;Skill17;Skill18;Skill19;Skill20;Skill21;Skill22;Skill23</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Marketing&apos;)].skills[0].id;$..[?(@.name == &apos;Marketing&apos;)].skills[1].id;$..[?(@.name == &apos;Marketing&apos;)].skills[2].id;$..[?(@.name == &apos;Marketing&apos;)].skills[3].id;$..[?(@.name == &apos;Marketing&apos;)].skills[4].id;$..[?(@.name == &apos;Marketing&apos;)].skills[5].id;$..[?(@.name == &apos;Marketing&apos;)].skills[6].id;$..[?(@.name == &apos;Marketing&apos;)].skills[7].id;$..[?(@.name == &apos;Marketing&apos;)].skills[8].id;$..[?(@.name == &apos;Marketing&apos;)].skills[9].id;$..[?(@.name == &apos;Marketing&apos;)].skills[10].id;$..[?(@.name == &apos;Marketing&apos;)].skills[11].id;$..[?(@.name == &apos;Marketing&apos;)].skills[12].id;$..[?(@.name == &apos;Marketing&apos;)].skills[13].id;$..[?(@.name == &apos;Marketing&apos;)].skills[14].id;$..[?(@.name == &apos;Marketing&apos;)].skills[15].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Software Development_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill24;Skill25;Skill26;Skill27;Skill28;Skill29;Skill30;Skill31;Skill32;Skill33;Skill34;Skill35;Skill36;Skill37;Skill38</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Software Development&apos;)].skills[0].id;$..[?(@.name == &apos;Software Development&apos;)].skills[1].id;$..[?(@.name == &apos;Software Development&apos;)].skills[2].id;$..[?(@.name == &apos;Software Development&apos;)].skills[3].id;$..[?(@.name == &apos;Software Development&apos;)].skills[4].id;$..[?(@.name == &apos;Software Development&apos;)].skills[5].id;$..[?(@.name == &apos;Software Development&apos;)].skills[6].id;$..[?(@.name == &apos;Software Development&apos;)].skills[7].id;$..[?(@.name == &apos;Software Development&apos;)].skills[8].id;$..[?(@.name == &apos;Software Development&apos;)].skills[9].id;$..[?(@.name == &apos;Software Development&apos;)].skills[10].id;$..[?(@.name == &apos;Software Development&apos;)].skills[11].id;$..[?(@.name == &apos;Software Development&apos;)].skills[12].id;$..[?(@.name == &apos;Software Development&apos;)].skills[13].id;$..[?(@.name == &apos;Software Development&apos;)].skills[14].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Design_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill39;Skill40;Skill41;Skill42;Skill43;Skill44;Skill45;Skill46;Skill47;Skill48;Skill49;Skill50;Skill51;Skill52;Skill53;Skill54;Skill55;Skill56</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Design&apos;)].skills[0].id;$..[?(@.name == &apos;Design&apos;)].skills[1].id;$..[?(@.name == &apos;Design&apos;)].skills[2].id;$..[?(@.name == &apos;Design&apos;)].skills[3].id;$..[?(@.name == &apos;Design&apos;)].skills[4].id;$..[?(@.name == &apos;Design&apos;)].skills[5].id;$..[?(@.name == &apos;Design&apos;)].skills[6].id;$..[?(@.name == &apos;Design&apos;)].skills[7].id;$..[?(@.name == &apos;Design&apos;)].skills[8].id;$..[?(@.name == &apos;Design&apos;)].skills[9].id;$..[?(@.name == &apos;Design&apos;)].skills[10].id;$..[?(@.name == &apos;Design&apos;)].skills[11].id;$..[?(@.name == &apos;Design&apos;)].skills[12].id;$..[?(@.name == &apos;Design&apos;)].skills[13].id;$..[?(@.name == &apos;Design&apos;)].skills[14].id;$..[?(@.name == &apos;Design&apos;)].skills[15].id;$..[?(@.name == &apos;Design&apos;)].skills[16].id;$..[?(@.name == &apos;Design&apos;)].skills[17].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="IT services_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill57;Skill58;Skill59;Skill60;Skill61</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;IT Services&apos;)].skills[0].id;$..[?(@.name == &apos;IT Services&apos;)].skills[1].id;$..[?(@.name == &apos;IT Services&apos;)].skills[2].id;$..[?(@.name == &apos;IT Services&apos;)].skills[3].id;$..[?(@.name == &apos;IT Services&apos;)].skills[4].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Writing &amp; Editing_Skills" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Skill62;Skill63;Skill64;Skill65;Skill66;Skill67;Skill68;Skill69;Skill70</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[0].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[1].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[2].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[3].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[4].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[5].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[6].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[7].id;$..[?(@.name == &apos;Writing &amp; Editing&apos;)].skills[8].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">0;0;0;0;0;0;0;0;0</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PostJob" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;title&quot;: &quot;Test Job for MnS&quot;,&#xd;
    &quot;projectName&quot;: &quot;This is Test Project&quot;,&#xd;
    &quot;description&quot;: &quot;This is my second job posting&quot;,&#xd;
	&quot;areaOfExpertise&quot;: [{&#xd;
		&quot;id&quot;: &quot;${AOE_accounting}&quot;,&#xd;
		&quot;isRequired&quot;: false,&#xd;
		&quot;experience&quot;: {&#xd;
			&quot;value&quot;: 8,&#xd;
			&quot;isRequired&quot;: false&#xd;
		}&#xd;
	}],&#xd;
	&quot;hoursPerWeek&quot;: {&#xd;
		&quot;min&quot;: 30,&#xd;
		&quot;max&quot;: 30&#xd;
	},&#xd;
	&quot;locations&quot;: [{&#xd;
		&quot;zipCode&quot;: &quot;97460&quot;,&#xd;
		&quot;city&quot;: &quot;Lahore&quot;,&#xd;
		&quot;address2&quot;: &quot;Dhoraji&quot;,&#xd;
		&quot;phone&quot;: &quot;343302356&quot;,&#xd;
		&quot;address1&quot;: &quot;Flat#20&quot;,&#xd;
		&quot;state&quot;: &quot;pak&quot;,&#xd;
		&quot;isHeadquarter&quot;: true,&#xd;
		&quot;geom&quot;: {&#xd;
			&quot;coordinates&quot;: [0, 0],&#xd;
			&quot;type&quot;: &quot;Point&quot;&#xd;
		},&#xd;
		&quot;isRemote&quot;: false&#xd;
	}],&#xd;
	&quot;deadline&quot;: ${future_date},&#xd;
	&quot;startDate&quot;: ${current_date_midtime},&#xd;
	&quot;isOpenEnded&quot;: true,&#xd;
	&quot;hourlyPayRate&quot;: {&#xd;
		&quot;min&quot;: 60,&#xd;
		&quot;max&quot;: 80&#xd;
	},&#xd;
	&quot;skills&quot;: [{&#xd;
		&quot;id&quot;: &quot;${Skill0}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 1&#xd;
	}, {&#xd;
		&quot;id&quot;: &quot;${Skill1}&quot;,&#xd;
		&quot;experience&quot;: 0,&#xd;
		&quot;rank&quot;: 2&#xd;
	}],&#xd;
	&quot;visibility&quot;: true,&#xd;
	&quot;technicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;Tech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;nonTechnicalQuestions&quot;: {&#xd;
		&quot;questions&quot;: &quot;NonTech Question 1&quot;,&#xd;
		&quot;urls&quot;: []&#xd;
	},&#xd;
	&quot;isDraft&quot;: true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
              <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
              <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;));
vars.put(&quot;tz&quot;, vars.get(&quot;tzOffset&quot;));</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">TZ-Offset</stringProp>
                    <stringProp name="Header.value">${tz}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Get JobId" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey"></stringProp>
                <stringProp name="script">var jsonString = prev.getResponseDataAsString(); 
var obj = JSON.parse(jsonString);
log.info(obj.id);
vars.put(&quot;jobPostId&quot;, obj.id);</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Job ${Saved as Draft/Post}  -- ${test.description}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
            <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="script">import org.apache.jmeter.engine.util.CompoundVariable;
import org.apache.commons.io.FileUtils;
import org.apache.jmeter.protocol.http.util.HTTPArgument;


def httpMethod = vars.get(&quot;http.method&quot;);
sampler.setMethod(httpMethod);


if(!vars.get(&quot;input.json&quot;).equals(&quot;&quot;))
{
	
def postedData = new CompoundVariable(new File(vars.get(&quot;input.json&quot;)).text).execute();
def arg= new HTTPArgument(&quot;&quot;, postedData, null, true);
arg.setAlwaysEncoded(false);
sampler.getArguments().addArgument(arg);

log.info(postedData);
}</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="461893074">${assertion}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">300</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true">
            <stringProp name="TestPlan.comments">Closing the job</stringProp>
          </OnceOnlyController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CloseJob" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Close Job" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
                <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
                <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${__P(api_version)}/jobs/${jobPostId}/close</stringProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">vars.put(&quot;token&quot;, props.get(&quot;empaccesstoken&quot;))</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1287622914">{&quot;status&quot;:&quot;close&quot;}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">true</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Get Employer&apos;s Location ID" enabled="true"/>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Locations" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(base_URL)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(port)}</stringProp>
          <stringProp name="HTTPSampler.protocol">${__P(http_protocol)}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${__P(api_version)}/employers/locations</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">locationId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">*</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">locationId</stringProp>
            <stringProp name="RegexExtractor.regex">^(.*).{2}</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
